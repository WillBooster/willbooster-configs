<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{"currentConversationId":"7ea12cec-12c9-4df5-ac58-a566c620a64d","conversations":{"99448644-5d9d-4db0-81e8-12d58f308b08":{"id":"99448644-5d9d-4db0-81e8-12d58f308b08","createdAtIso":"2025-05-02T23:35:50.940Z","lastInteractedAtIso":"2025-05-02T23:35:50.940Z","chatHistory":[],"feedbackStates":{},"toolUseStates":{},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":false,"extraData":{"hasDirtyEdits":false},"personaType":0},"e3d5f367-d8e7-4c42-b20a-07d5456291dc":{"id":"e3d5f367-d8e7-4c42-b20a-07d5456291dc","createdAtIso":"2025-05-02T23:35:50.995Z","lastInteractedAtIso":"2025-05-02T23:35:50.995Z","chatHistory":[],"feedbackStates":{},"toolUseStates":{},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":false,"extraData":{"hasDirtyEdits":false},"personaType":0},"7ea12cec-12c9-4df5-ac58-a566c620a64d":{"id":"7ea12cec-12c9-4df5-ac58-a566c620a64d","name":"Welcome to the Augment Agent","createdAtIso":"2025-05-02T23:35:53.069Z","lastInteractedAtIso":"2025-05-02T23:38:32.293Z","chatHistory":[{"request_id":"4026a218-8183-427f-9ae3-5d257d27b85d","uuid":"85d93992-02c3-44d4-b2f9-55a333551c23","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":0,"toTimestamp":1746228953070,"seen_state":"seen"},{"status":"success","request_id":"4392e591-f220-4c4f-a3d4-273c71cf8271","request_message":"Fix @renovate.json5 to merge a PR for updating docker digest like `chore(deps): update imbios/bun-node:latest-22-slim docker digest to 8d393e9` automatically.","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"Fix "},{"type":"mention","attrs":{"id":"/renovate.json5","label":"renovate.json5","data":{"label":"renovate.json5","name":"renovate.json5","id":"/renovate.json5","file":{"repoRoot":"","pathName":"renovate.json5"},"type":"item"}}},{"type":"text","text":" to merge a PR for updating docker digest like `chore(deps): update imbios/bun-node:latest-22-slim docker digest to 8d393e9` automatically."}]}]},"mentioned_items":[{"label":"renovate.json5","name":"renovate.json5","id":"/renovate.json5","file":{"repoRoot":"","pathName":"renovate.json5"},"type":"item"}],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01UEFrNUGzQSjRm7oSsS37NT","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find the Renovate configuration file in the repository. Look for files like renovate.json, renovate.json5, .renovaterc.json, or similar.\"}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"I'll help you fix the Renovate configuration to automatically merge PRs that update Docker digests with commit messages like 'chore(deps): update imbios/bun-node:latest-22-slim docker digest to 8d393e9'. Let me first gather information about the current Renovate configuration.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"Fix @renovate.json5 to merge a PR for updating docker digest like `chore(deps): update imbios/bun-node:latest-22-slim docker digest to 8d393e9` automatically."}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs","folderRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}],"workspaceFoldersUnchanged":false}}],"timestamp":"2025-05-02T23:37:35.873Z","response_text":"I'll help you fix the Renovate configuration to automatically merge PRs that update Docker digests with commit messages like 'chore(deps): update imbios/bun-node:latest-22-slim docker digest to 8d393e9'. Let me first gather information about the current Renovate configuration.\n","workspace_file_chunks":[]},{"status":"success","request_id":"8fd45689-2488-4cde-a98c-2d06ffff044f","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01RjwL8xomQysT2ba436UP7K","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find the renovate.json5 file in the repository. I need to see the full content of this file.\"}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"Let me check if there's a specific renovate.json5 file that needs to be modified:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: package.json\n{\n  \"name\": \"@willbooster/configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/WillBooster/willbooster-configs.git\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"workspaces\": [\n    \"packages/*\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify && yarn workspaces foreach --all --parallel --verbose run format\",\n    \"postinstall\": \"husky || true\",\n    \"lint\": \"yarn workspaces foreach --all --parallel --verbose run lint\",\n    \"lint-fix\": \"yarn workspaces foreach --all --parallel --verbose run lint-fix\",\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\",\n    \"prepare\": \"husky || true\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/packages/**\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"release\": \"yarn multi-semantic-release --debug\",\n    \"test\": \"CI=1 FORCE_COLOR=3 yarn workspaces foreach --all --verbose run test\",\n    \"typecheck\": \"yarn workspaces foreach --all --parallel --verbose run typecheck\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@qiwi/multi-semantic-release\": \"7.1.2\",\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"conventional-changelog-conventionalcommits\": \"6.1.0\",\n    \"dotenv-cli\": \"8.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"husky\": \"9.1.7\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"pinst\": \"3.0.0\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  },\n  \"packageManager\": \"yarn@4.9.1\"\n}\n...\nPath: README.md\n# WillBooster Configs\n\n[![Test](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n:books: A set of conventional configuration files used in WillBooster Inc..\n\n[![Test](https://github.com/WillBooster/willbooster-configs/workflows/Test/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions?query=workflow%3ATest)\n\n## Packages\n\n- [@willbooster/babel-configs](packages/babel-configs)\n- [@willbooster/eslint-config-blitz-next](packages/eslint-config-blitz-next)\n- [@willbooster/eslint-config-js](packages/eslint-config-js)\n- [@willbooster/eslint-config-js-react](packages/eslint-config-js-react)\n- [@willbooster/eslint-config-next](packages/eslint-config-next)\n- [@willbooster/eslint-config-ts](packages/eslint-config-ts)\n- [@willbooster/eslint-config-ts-react](packages/eslint-config-ts-react)\n- [@willbooster/prettier-config](packages/prettier-config)\n- [@willbooster/renovate-config](packages/renovate-config)\n\n## Following Guides\n\n- [TypeScript StyleGuide](https://basarat.gitbook.io/typescript/styleguide)\n...\nPath: packages/prettier-config/package.json\n{\n  \"name\": \"@willbooster/prettier-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Prettier config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \".prettierrc.json\",\n  \"files\": [\n    \".prettierrc.json\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"devDependencies\": {\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n  \"peerDependencies\": {\n    \"prettier\": \">=2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n...\nPath: packages/biome-config/biome.jsonc\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\",\n  \"files\": {\n    \"ignore\": [\"**/dist/**\", \"**/test-fixtures/**\", \"**/test-results/**\"],\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"attributePosition\": \"auto\",\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 120,\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"arrowParentheses\": \"always\",\n      \"bracketSameLine\": false,\n      \"bracketSpacing\": true,\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"quoteStyle\": \"single\",\n      \"semicolons\": \"always\",\n      \"trailingCommas\": \"es5\",\n    },\n  },\n  \"json\": {\n    \"formatter\": {\n      \"trailingCommas\": \"none\",\n    },\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedImports\": {\n          \"level\": \"error\",\n          \"fix\": \"safe\",\n        },\n      },\n    },\n  },\n...\nPath: packages/babel-configs/package.json\n{\n  \"name\": \"@willbooster/babel-configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A set of babel configs for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"files\": [\n    \"babel.*.cjs\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/babel__core\": \"7.20.5\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"core-js\": \"3.42.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: .yarnrc.yml\ndefaultSemverRangePrefix: ''\n\nenableGlobalCache: true\n\nnmMode: hardlinks-global\n\nnodeLinker: node-modules\n\nplugins:\n  - checksum: 38e9c07e39ad26ceca2aad81e352f9827d3f08608a396e7286ee684b0551208b9043ba43811e5757e32867999023c982b719e6ae981cffdf2e48ba0aa42b77ef\n    path: .yarn/plugins/plugin-auto-install.cjs\n    spec: 'https://github.com/WillBooster/yarn-plugin-auto-install/releases/download/v2.0.2/index.cjs'\n\nyarnPath: .yarn/releases/yarn-4.9.1.cjs\n...\nPath: packages/biome-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/shared/package.json\n{\n  \"name\": \"@willbooster/shared\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"./src\",\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n...\nPath: packages/biome-config/package.json\n{\n  \"name\": \"@willbooster/biome-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Biome config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \"biome.jsonc\",\n  \"files\": [\n    \"biome.jsonc\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n  \"peerDependencies\": {\n    \"@biomejs/biome\": \">=1.7.1\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n...\nPath: packages/biome-config/.gitignore\n...\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n# End of https://www.toptal.com/developers/gitignore/api/vim\n\n# Created by https://www.toptal.com/developers/gitignore/api/yarn\n# Edit at https://www.toptal.com/developers/gitignore?templates=yarn\n\n### yarn ###\n# https://yarnpkg.com/getting-started/qa#which-files-should-be-gitignored\n\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n\n# if you are NOT using Zero-installs, then:\n# comment the following lines\n# !.yarn/cache\n\n# and uncomment the following lines\n.pnp.*\n\n# End of https://www.toptal.com/developers/gitignore/api/yarn\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n...\nPath: packages/biome-config/README.md\n# biome-config\n\nA Biome config file for my repositories.\nYou need to do the following command to install peer dependencies.\n\n```\nyarn add -D @biomejs/biome\n```\n...\nPath: packages/babel-configs/.gitignore\n...\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n# End of https://www.toptal.com/developers/gitignore/api/vim\n\n# Created by https://www.toptal.com/developers/gitignore/api/yarn\n# Edit at https://www.toptal.com/developers/gitignore?templates=yarn\n\n### yarn ###\n# https://yarnpkg.com/getting-started/qa#which-files-should-be-gitignored\n\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n\n# if you are NOT using Zero-installs, then:\n# comment the following lines\n# !.yarn/cache\n\n# and uncomment the following lines\n.pnp.*\n\n# End of https://www.toptal.com/developers/gitignore/api/yarn\n...\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n...\nPath: packages/eslint-config-next/package.json\n{\n  \"name\": \"@willbooster/eslint-config-next\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for Next.js\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix --rule \\\"{ react-hooks/exhaustive-deps: 0 }\\\"\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n...\nPath: packages/babel-configs/README.md\n# babel-configs\n\nA set of babel config files for my repositories.\n\n## How to add dependencies for babel.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n...\nPath: packages/eslint-config-js/package.json\n{\n  \"name\": \"@willbooster/eslint-config-js\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for JavaScript projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\"\n  },\n...\nPath: packages/eslint-config-ts/package.json\n{\n  \"name\": \"@willbooster/eslint-config-ts\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for TypeScript projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix --rule \\\"{ react-hooks/exhaustive-deps: 0 }\\\"\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n...\nPath: packages/biome-config/NOTICE\n@willbooster/biome-config\n\nCopyright (c) 2024 WillBooster Inc. and contributors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n...\nPath: packages/biome-config/.prettierignore\n...\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nb...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01UEFrNUGzQSjRm7oSsS37NT"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs","folderRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}],"workspaceFoldersUnchanged":false}}],"timestamp":"2025-05-02T23:37:43.571Z","response_text":"Let me check if there's a specific renovate.json5 file that needs to be modified:\n","workspace_file_chunks":[]},{"status":"success","request_id":"90459e11-c201-4bea-83f4-d1757361df94","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_016vxrLrhz34BFLGSSmy6nZJ","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find the renovate-config package in the repository. I need to see the content of any files in packages/renovate-config/\"}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"Let me check if there's a specific package for renovate configuration:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: .releaserc.json\n{\n  \"branches\": [\"main\"],\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", { \"preset\": \"conventionalcommits\" }],\n    [\"@semantic-release/release-notes-generator\", { \"preset\": \"conventionalcommits\" }],\n    \"@semantic-release/npm\",\n    [\n      \"@semantic-release/github\",\n      {\n        \"successComment\": false,\n        \"labels\": [\"r: semantic-release\"],\n        \"releasedLabels\": [\"released :bookmark:\"],\n        \"failComment\": false\n      }\n    ]\n  ]\n}...\nPath: package.json\n{\n  \"name\": \"@willbooster/configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/WillBooster/willbooster-configs.git\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"workspaces\": [\n    \"packages/*\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify && yarn workspaces foreach --all --parallel --verbose run format\",\n    \"postinstall\": \"husky || true\",\n    \"lint\": \"yarn workspaces foreach --all --parallel --verbose run lint\",\n    \"lint-fix\": \"yarn workspaces foreach --all --parallel --verbose run lint-fix\",\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\",\n    \"prepare\": \"husky || true\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/packages/**\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"release\": \"yarn multi-semantic-release --debug\",\n    \"test\": \"CI=1 FORCE_COLOR=3 yarn workspaces foreach --all --verbose run test\",\n    \"typecheck\": \"yarn workspaces foreach --all --parallel --verbose run typecheck\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@qiwi/multi-semantic-release\": \"7.1.2\",\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"conventional-changelog-conventionalcommits\": \"6.1.0\",\n    \"dotenv-cli\": \"8.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"husky\": \"9.1.7\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"pinst\": \"3.0.0\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  },\n  \"packageManager\": \"yarn@4.9.1\"\n}\n...\nPath: .yarnrc.yml\ndefaultSemverRangePrefix: ''\n\nenableGlobalCache: true\n\nnmMode: hardlinks-global\n\nnodeLinker: node-modules\n\nplugins:\n  - checksum: 38e9c07e39ad26ceca2aad81e352f9827d3f08608a396e7286ee684b0551208b9043ba43811e5757e32867999023c982b719e6ae981cffdf2e48ba0aa42b77ef\n    path: .yarn/plugins/plugin-auto-install.cjs\n    spec: 'https://github.com/WillBooster/yarn-plugin-auto-install/releases/download/v2.0.2/index.cjs'\n\nyarnPath: .yarn/releases/yarn-4.9.1.cjs\n...\nPath: packages/biome-config/biome.jsonc\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\",\n  \"files\": {\n    \"ignore\": [\"**/dist/**\", \"**/test-fixtures/**\", \"**/test-results/**\"],\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"attributePosition\": \"auto\",\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 120,\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"arrowParentheses\": \"always\",\n      \"bracketSameLine\": false,\n      \"bracketSpacing\": true,\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"quoteStyle\": \"single\",\n      \"semicolons\": \"always\",\n      \"trailingCommas\": \"es5\",\n    },\n  },\n  \"json\": {\n    \"formatter\": {\n      \"trailingCommas\": \"none\",\n    },\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedImports\": {\n          \"level\": \"error\",\n          \"fix\": \"safe\",\n        },\n      },\n    },\n  },\n  \"organizeImports\": {\n    \"enabled\": true,\n  },\n  \"vcs\": {\n    \"enabled\": true,\n    \"clientKind\": \"git\",\n    \"useIgnoreFile\": true,\n    \"defaultBranch\": \"main\",\n  },\n}\n...\nPath: .github/workflows/test.yml\nname: Test\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - '**/docs/**'\n  push:\n    branches:\n      - main\n      - wbfy\n    paths-ignore:\n      - '**.md'\n      - '**/docs/**'\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  test:\n    uses: WillBooster/reusable-workflows/.github/workflows/test.yml@main\n    with:\n      github_hosted_runner: true\n    secrets:\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n...\nPath: README.md\n# WillBooster Configs\n\n[![Test](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n:books: A set of conventional configuration files used in WillBooster Inc..\n\n[![Test](https://github.com/WillBooster/willbooster-configs/workflows/Test/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions?query=workflow%3ATest)\n\n## Packages\n\n- [@willbooster/babel-configs](packages/babel-configs)\n- [@willbooster/eslint-config-blitz-next](packages/eslint-config-blitz-next)\n- [@willbooster/eslint-config-js](packages/eslint-config-js)\n- [@willbooster/eslint-config-js-react](packages/eslint-config-js-react)\n- [@willbooster/eslint-config-next](packages/eslint-config-next)\n- [@willbooster/eslint-config-ts](packages/eslint-config-ts)\n- [@willbooster/eslint-config-ts-react](packages/eslint-config-ts-react)\n- [@willbooster/prettier-config](packages/prettier-config)\n- [@willbooster/renovate-config](packages/renovate-config)\n\n## Following Guides\n\n- [TypeScript StyleGuide](https://basarat.gitbook.io/typescript/styleguide)\n...\nPath: packages/eslint-config-js-react/package.json\n{\n  \"name\": \"@willbooster/eslint-config-js-react\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for JavaScript projects using React\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix --rule \\\"{ react-hooks/exhaustive-deps: 0 }\\\"\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\"\n  },\n...\nPath: packages/babel-configs/package.json\n{\n  \"name\": \"@willbooster/babel-configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A set of babel configs for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"files\": [\n    \"babel.*.cjs\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/babel__core\": \"7.20.5\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"core-js\": \"3.42.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: .github/workflows/release.yml\nname: Release\non:\n  push:\n    branches:\n      - main\nconcurrency:\n  group: ${{ github.workflow }}\n  cancel-in-progress: false\njobs:\n  release:\n    uses: WillBooster/reusable-workflows/.github/workflows/release.yml@main\n    with:\n      github_hosted_runner: true\n    secrets:\n      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_FOR_RELEASE }}\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n...\nPath: packages/prettier-config/package.json\n{\n  \"name\": \"@willbooster/prettier-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Prettier config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \".prettierrc.json\",\n  \"files\": [\n    \".prettierrc.json\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"devDependencies\": {\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n  \"peerDependencies\": {\n    \"prettier\": \">=2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n...\nPath: packages/shared/package.json\n{\n  \"name\": \"@willbooster/shared\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"./src\",\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/eslint-config-ts\": \"^11.2.0\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"eslint-config-flat-gitignore\": \"2.1.0\",\n    \"eslint-config-prettier\": \"10.1.2\",\n    \"eslint-import-resolver-typescript\": \"4.3.4\",\n    \"eslint-plugin-import\": \"2.31.0\",\n    \"eslint-plugin-sort-class-members\": \"1.21.0\",\n    \"eslint-plugin-sort-destructure-keys\": \"2.0.0\",\n    \"eslint-plugin-unicorn\": \"59.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  }\n}\n...\nPath: packages/biome-config/package.json\n{\n  \"name\": \"@willbooster/biome-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Biome config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \"biome.jsonc\",\n  \"files\": [\n    \"biome.jsonc\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: tsconfig.json\n{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"alwaysStrict\": true,\n    \"declaration\": true,\n    \"esModuleInterop\": true,\n    \"importHelpers\": false,\n    \"jsx\": \"react-jsx\",\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"outDir\": \"dist\",\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"target\": \"esnext\",\n    \"typeRoots\": [\"./node_modules/@types\", \"./@types\"]\n  },\n  \"include\": [\n    \"packages/*/scripts/**/*\",\n    \"packages/*/src/**/*\",\n    \"packages/*/tests/**/*\",\n    \"scripts/**/*\",\n    \"src/**/*\",\n    \"tests/**/*\"\n  ]\n}\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/eslint-config-ts-react/package.json\n{\n  \"name\": \"@willbooster/eslint-config-ts-react\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for TypeScript projects using React\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix --rule \\\"{ react-hooks/exhaustive-deps: 0 }\\\"\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n...\nPath: packages/biome-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/eslint-config-js-react/.lintstagedrc.cjs\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst micromatch = require('micromatch');\n\nmodule.exports = {\n  './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}': [\n    'node ../../node_modules/.bin/eslint --fix --rule \"{ react-hooks/exhaustive-deps: 0 }\"',\n    'node ../../node_modules/.bin/prettier --cache --write',\n  ],\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n\n    filteredFiles = filteredFiles.map((file) => path.relative('', file));\n    filteredFiles = micromatch.not(filteredFiles, './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}');\n    filteredFiles = filteredFiles.map((file) => path.resolve(file));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/prettier-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/shared/.lintstagedrc.cjs\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst micromatch = require('micromatch');\n\nmodule.exports = {\n  './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}': [\n    'node ../../node_modules/.bin/eslint --fix',\n    'node ../../node_modules/.bin/prettier --cache --write',\n  ],\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n\n    filteredFiles = filteredFiles.map((file) => path.relative('', file));\n    filteredFiles = micromatch.not(filteredFiles, './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}');\n    filteredFiles = filteredFiles.map((file) => path.resolve(file));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: .husky/post-merge\nchanged_files=\"$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)\"\n\nrun_if_changed() {\n  if echo \"$changed_files\" | grep --quiet -E \"$1\"; then\n    eval \"$2\"\n  fi\n}\n\nrun_if_changed \"\\..+-version\" \"awk '{print \\$1}' .tool-versions | xargs -I{} asdf plugin add {}\"\nrun_if_changed \"\\..+-version\" \"asdf plugin update --all\"\nrun_if_changed \"\\..+-version\" \"asdf install\"\nrun_if_changed \"package\\.json\" \"yarn\"\n...\nPath: packages/eslint-config-ts-react/.lintstagedrc.cjs\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst micromatch = require('micromatch');\n\nmodule.exports = {\n  './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}': [\n    'node ../../node_modules/.bin/eslint --fix --rule \"{ react-hooks/exhaustive-deps: 0 }\"',\n    'node ../../node_modules/.bin/prettier --cache --write',\n  ],\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n\n    filteredFiles = filteredFiles.map((file) => path.relative('', file));\n    filteredFiles = micromatch.not(filteredFiles, './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}');\n    filteredFiles = filteredFiles.map((file) => path.resolve(file));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-packag...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01RjwL8xomQysT2ba436UP7K"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs","folderRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}],"workspaceFoldersUnchanged":false}}],"timestamp":"2025-05-02T23:37:50.039Z","response_text":"Let me check if there's a specific package for renovate configuration:\n","workspace_file_chunks":[]},{"status":"success","request_id":"32398e6a-be04-4df7-ae0e-4ef150ee8717","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01AuXtpD8Wd616DXPsQBhU5J","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find files in packages/renovate-config/ directory\"}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"Let me search specifically for the renovate-config package:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: packages/biome-config/package.json\n{\n  \"name\": \"@willbooster/biome-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Biome config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \"biome.jsonc\",\n  \"files\": [\n    \"biome.jsonc\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: packages/babel-configs/package.json\n{\n  \"name\": \"@willbooster/babel-configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A set of babel configs for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"files\": [\n    \"babel.*.cjs\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/babel__core\": \"7.20.5\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"core-js\": \"3.42.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: packages/babel-configs/README.md\n# babel-configs\n\nA set of babel config files for my repositories.\n\n## How to add dependencies for babel.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n\n## How to add dependencies for babel.react.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-react \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.react.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-react \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n...\nPath: packages/biome-config/README.md\n# biome-config\n\nA Biome config file for my repositories.\nYou need to do the following command to install peer dependencies.\n\n```\nyarn add -D @biomejs/biome\n```\n...\nPath: packages/biome-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/biome-config/.gitignore\n...\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Local History for Visual Studio Code\n.history/\n\n# Built Visual Studio Code Extensions\n*.vsix\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n# End of https://www.toptal.com/developers/gitignore/api/visualstudiocode\n\n# Created by https://www.toptal.com/developers/gitignore/api/emacs\n# Edit at https://www.toptal.com/developers/gitignore?templates=emacs\n\n### Emacs ###\n# -*- mode: gitignore; -*-\n*~\n\\#*\\#\n/.emacs.desktop\n/.emacs.desktop.lock\n*.elc\nauto-save-list\ntramp\n.\\#*\n\n# Org-mode\n.org-id-locations\n*_archive\n\n# flymake-mode\n*_flymake.*\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n# End of https://www.toptal.com/developers/gitignore/api/vim\n\n# Created by https://www.toptal.com/developers/gitignore/api/yarn\n# Edit at https://www.toptal.com/developers/gitignore?templates=yarn\n\n### yarn ###\n# https://yarnpkg.com/getting-started/qa#which-files-should-be-gitignored\n\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n\n# if you are NOT using Zero-installs, then:\n# comment the following lines\n# !.yarn/cache\n\n# and uncomment the following lines\n.pnp.*\n\n# End of https://www.toptal.com/developers/gitignore/api/yarn\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n...\nPath: packages/babel-configs/babel.config.cjs\n/** @type {import('@babel/core').TransformOptions} */\nconst config = {\n  presets: [\n    [\n      '@babel/preset-env',\n      {\n        bugfixes: true,\n      },\n    ],\n    '@babel/typescript',\n  ],\n  plugins: ['@babel/proposal-class-properties', '@babel/proposal-numeric-separator'],\n  env: {\n    production: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn'],\n          },\n        ],\n      ],\n    },\n    test: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn', 'debug'],\n          },\n        ],\n      ],\n      presets: [\n        [\n          '@babel/preset-env',\n          {\n            modules: 'auto',\n          },\n        ],\n      ],\n    },\n  },\n};\n\nmodule.exports = config;\n...\nPath: packages/babel-configs/.gitignore\n...\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n...\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: README.md\n# WillBooster Configs\n\n[![Test](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n:books: A set of conventional configuration files used in WillBooster Inc..\n\n[![Test](https://github.com/WillBooster/willbooster-configs/workflows/Test/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions?query=workflow%3ATest)\n\n## Packages\n\n- [@willbooster/babel-configs](packages/babel-configs)\n- [@willbooster/eslint-config-blitz-next](packages/eslint-config-blitz-next)\n- [@willbooster/eslint-config-js](packages/eslint-config-js)\n- [@willbooster/eslint-config-js-react](packages/eslint-config-js-react)\n- [@willbooster/eslint-config-next](packages/eslint-config-next)\n- [@willbooster/eslint-config-ts](packages/eslint-config-ts)\n- [@willbooster/eslint-config-ts-react](packages/eslint-config-ts-react)\n- [@willbooster/prettier-config](packages/prettier-config)\n- [@willbooster/renovate-config](packages/renovate-config)\n\n## Following Guides\n\n- [TypeScript StyleGuide](https://basarat.gitbook.io/typescript/styleguide)\n...\nPath: packages/prettier-config/README.md\n# prettier-config\n\nA prettier config file for my repositories.\nYou need to do the following command to install peer dependencies.\n\n```\nyarn add -D prettier\n```\n...\nPath: packages/prettier-config/package.json\n{\n  \"name\": \"@willbooster/prettier-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Prettier config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \".prettierrc.json\",\n  \"files\": [\n    \".prettierrc.json\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"devDependencies\": {\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n  \"peerDependencies\": {\n    \"prettier\": \">=2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: package.json\n{\n  \"name\": \"@willbooster/configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/WillBooster/willbooster-configs.git\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"workspaces\": [\n    \"packages/*\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify && yarn workspaces foreach --all --parallel --verbose run format\",\n    \"postinstall\": \"husky || true\",\n    \"lint\": \"yarn workspaces foreach --all --parallel --verbose run lint\",\n    \"lint-fix\": \"yarn workspaces foreach --all --parallel --verbose run lint-fix\",\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\",\n    \"prepare\": \"husky || true\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/packages/**\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"release\": \"yarn multi-semantic-release --debug\",\n    \"test\": \"CI=1 FORCE_COLOR=3 yarn workspaces foreach --all --verbose run test\",\n    \"typecheck\": \"yarn workspaces foreach --all --parallel --verbose run typecheck\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@qiwi/multi-semantic-release\": \"7.1.2\",\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"conventional-changelog-conventionalcommits\": \"6.1.0\",\n    \"dotenv-cli\": \"8.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"husky\": \"9.1.7\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"pinst\": \"3.0.0\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  },\n  \"packageManager\": \"yarn@4.9.1\"\n}\n...\nPath: packages/eslint-config-next/README.md\n# eslint-config-next\n\nA ESLint flat config for Next.js.\nYou need to do the following command to install peer dependencies.\n\n```sh\nyarn add -D @willbooster/eslint-config-next \\\n    eslint \\\n    eslint-config-flat-gitignore \\\n    eslint-config-prettier \\\n    eslint-plugin-import \\\n    eslint-plugin-prettier \\\n    eslint-plugin-react \\\n    eslint-plugin-react-hooks \\\n    eslint-plugin-sort-class-members \\\n    eslint-plugin-sort-destructure-keys \\\n    eslint-plugin-unicorn \\\n    eslint-plugin-unused-imports \\\n    typescript \\\n    typescript-eslint \\\n    eslint-import-resolver-typescript \\\n    eslint-config-next\n```\n...\nPath: packages/biome-config/biome.jsonc\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\",\n  \"files\": {\n    \"ignore\": [\"**/dist/**\", \"**/test-fixtures/**\", \"**/test-results/**\"],\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"attributePosition\": \"auto\",\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 120,\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"arrowParentheses\": \"always\",\n      \"bracketSameLine\": false,\n      \"bracketSpacing\": true,\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"quoteStyle\": \"single\",\n      \"semicolons\": \"always\",\n      \"trailingCommas\": \"es5\",\n    },\n  },\n  \"json\": {\n    \"formatter\": {\n      \"trailingCommas\": \"none\",\n    },\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedImports\": {\n          \"level\": \"error\",\n          \"fix\": \"safe\",\n        },\n      },\n    },\n  },\n...\nPath: packages/eslint-config-ts/README.md\n# eslint-config-ts\n\nA ESLint flat config for TypeScript projects.\nYou need to do the following command to install peer dependencies.\n\n```sh\nyarn add -D @willbooster/eslint-config-ts \\\n    eslint \\\n    eslint-config-flat-gitignore \\\n    eslint-config-prettier \\\n    eslint-plugin-import-x \\\n    eslint-plugin-prettier \\\n    eslint-plugin-sort-class-members \\\n    eslint-plugin-sort-destructure-keys \\\n    eslint-plugin-unicorn \\\n    eslint-plugin-unused-imports \\\n    typescript \\\n    typescript-eslint \\\n    eslint-import-resolver-typescript\n```\n...\nPath: packages/eslint-config-ts-react/README.md\n# eslint-config-ts-react\n\nA ESLint flat config for TypeScript projects using React.\nYou need to do the following command to install peer dependencies.\n\n```sh\nyarn add -D @willbooster/eslint-config-ts-react \\\n    eslint \\\n    eslint-config-flat-gitignore \\\n    eslint-config-prettier \\\n    eslint-plugin-import \\\n    eslint-plugin-prettier \\\n    eslint-plugin-react \\\n    eslint-plugin-react-hooks \\\n    eslint-plugin-sort-class-members \\\n    eslint-plugin-sort-destructure-keys \\\n    eslint-plugin-unicorn \\\n    eslint-plugin-unused-imports \\\n    typescript \\\n    typescript-eslint \\\n    eslint-import-resolver-typescript\n```\n...\nPath: packages/prettier-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/eslint-config-js/README.md\n# eslint-config-js\n\nA ESLint flat config for JavaScript projects.\nYou need to do the following command to install peer dependencies.\n\n```sh\nyarn add -D @willbooster/eslint-config-js \\\n    eslint \\\n    eslint-config-flat-gitignore \\\n    eslint-config-prettier \\\n    eslint-plugin-import-x \\\n    eslint-plugin-prettier \\\n    eslint-plugin-sort-class-members \\\n    eslint-plugin-sort-destructure-keys \\\n    eslint-plugin-unicorn \\\n    eslint-plugin-unused-imports \\\n    globals\n```\n...\nPath: packages/eslint-config-js-react/README.md\n# eslint-config-js-react\n\nA ESLint flat config for JavaScript projects using React.\nYou need to do the following command to install p...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_016vxrLrhz34BFLGSSmy6nZJ"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs","folderRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}],"workspaceFoldersUnchanged":false}}],"timestamp":"2025-05-02T23:37:57.592Z","response_text":"Let me search specifically for the renovate-config package:\n","workspace_file_chunks":[]},{"status":"success","request_id":"fcc520b2-5408-4ab1-bab1-a75cdaffb6d3","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01HsDZ2sveNpwsdh49m4mhrr","tool_name":"launch-process","input_json":"{\"command\": \"find /Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs/packages/renovate-config -type f\", \"wait\": true, \"max_wait_seconds\": 30}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"Let me search for the renovate-config package files specifically:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: packages/biome-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n  './**/migration.sql': (files) => {\n    for (const file of files) {\n      const content = fs.readFileSync(file, 'utf-8');\n      if (content.includes('Warnings:')) {\n        return [\n          `!!! Migration SQL file (${path.relative('', file)}) contains warnings !!! Solve the warnings and commit again.`,\n        ];\n      }\n    }\n    return [];\n  },\n};\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/biome-config/.gitignore\n# Project-specific settings (head)\n\n\n# Generated by @willbooster/gen-configs\n\n!.keep\n.env.production\n*/mount/*.hash\n.idea/copilot/chatSessions/\n.devcontainer/\ndist/\ntemp/\n\n# Created by https://www.toptal.com/developers/gitignore/api/windows\n# Edit at https://www.toptal.com/developers/gitignore?templates=windows\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# End of https://www.toptal.com/developers/gitignore/api/windows\n...\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Local History for Visual Studio Code\n.history/\n\n# Built Visual Studio Code Extensions\n*.vsix\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n# End of https://www.toptal.com/developers/gitignore/api/visualstudiocode\n\n# Created by https://www.toptal.com/developers/gitignore/api/emacs\n# Edit at https://www.toptal.com/developers/gitignore?templates=emacs\n\n### Emacs ###\n# -*- mode: gitignore; -*-\n*~\n\\#*\\#\n/.emacs.desktop\n/.emacs.desktop.lock\n*.elc\nauto-save-list\ntramp\n.\\#*\n\n# Org-mode\n.org-id-locations\n*_archive\n\n# flymake-mode\n*_flymake.*\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n# End of https://www.toptal.com/developers/gitignore/api/vim\n\n# Created by https://www.toptal.com/developers/gitignore/api/yarn\n# Edit at https://www.toptal.com/developers/gitignore?templates=yarn\n\n### yarn ###\n# https://yarnpkg.com/getting-started/qa#which-files-should-be-gitignored\n\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n\n# if you are NOT using Zero-installs, then:\n# comment the following lines\n# !.yarn/cache\n\n# and uncomment the following lines\n.pnp.*\n\n# End of https://www.toptal.com/developers/gitignore/api/yarn\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n...\nPath: packages/babel-configs/.gitignore\n# Project-specific settings (head)\n\n\n# Generated by @willbooster/gen-configs\n\n!.keep\n.env.production\n*/mount/*.hash\n.idea/copilot/chatSessions/\n.devcontainer/\ndist/\ntemp/\n\n# Created by https://www.toptal.com/developers/gitignore/api/windows\n# Edit at https://www.toptal.com/developers/gitignore?templates=windows\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# End of https://www.toptal.com/developers/gitignore/api/windows\n...\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Local History for Visual Studio Code\n.history/\n\n# Built Visual Studio Code Extensions\n*.vsix\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n# End of https://www.toptal.com/developers/gitignore/api/visualstudiocode\n\n# Created by https://www.toptal.com/developers/gitignore/api/emacs\n# Edit at https://www.toptal.com/developers/gitignore?templates=emacs\n\n### Emacs ###\n# -*- mode: gitignore; -*-\n*~\n\\#*\\#\n/.emacs.desktop\n/.emacs.desktop.lock\n*.elc\nauto-save-list\ntramp\n.\\#*\n\n# Org-mode\n.org-id-locations\n*_archive\n\n# flymake-mode\n*_flymake.*\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n...\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n...\nPath: packages/babel-configs/package.json\n{\n  \"name\": \"@willbooster/babel-configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A set of babel configs for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"files\": [\n    \"babel.*.cjs\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/babel__core\": \"7.20.5\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"core-js\": \"3.42.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: packages/biome-config/.prettierignore\n...\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n...\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n...\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: packages/babel-configs/README.md\n# babel-configs\n\nA set of babel config files for my repositories.\n\n## How to add dependencies for babel.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n\n## How to add dependencies for babel.react.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-react \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.react.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-react \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n...\nPath: packages/biome-config/package.json\n{\n  \"name\": \"@willbooster/biome-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Biome config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \"biome.jsonc\",\n  \"files\": [\n    \"biome.jsonc\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: packages/biome-config/README.md\n# biome-config\n\nA Biome config file for my repositories.\nYou need to do the following command to install peer dependencies.\n\n```\nyarn add -D @biomejs/biome\n```\n...\nPath: packages/babel-configs/babel.config.cjs\n/** @type {import('@babel/core').TransformOptions} */\nconst config = {\n  presets: [\n    [\n      '@babel/preset-env',\n      {\n        bugfixes: true,\n      },\n    ],\n    '@babel/typescript',\n  ],\n  plugins: ['@babel/proposal-class-properties', '@babel/proposal-numeric-separator'],\n  env: {\n    production: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn'],\n          },\n        ],\n      ],\n    },\n    test: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn', 'debug'],\n          },\n        ],\n      ],\n      presets: [\n        [\n          '@babel/preset-env',\n          {\n            modules: 'auto',\n          },\n        ],\n      ],\n    },\n  },\n};\n\nmodule.exports = config;\n...\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: packages/biome-config/biome.jsonc\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\",\n  \"files\": {\n    \"ignore\": [\"**/dist/**\", \"**/test-fixtures/**\", \"**/test-results/**\"],\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"attributePosition\": \"auto\",\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 120,\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"arrowParentheses\": \"always\",\n      \"bracketSameLine\": false,\n      \"bracketSpacing\": true,\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"quoteStyle\": \"single\",\n      \"semicolons\": \"always\",\n      \"trailingCommas\": \"es5\",\n    },\n  },\n  \"json\": {\n    \"formatter\": {\n      \"trailingCommas\": \"none\",\n    },\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedImports\": {\n          \"level\": \"error\",\n          \"fix\": \"safe\",\n        },\n      },\n    },\n  },\n...\nPath: README.md\n...\n\n- [@willbooster/babel-configs](packages/babel-configs)\n- [@willbooster/eslint-config-blitz-next](packages/eslint-config-blitz-next)\n- [@willbooster/eslint-config-js](packages/eslint-config-js)\n- [@willbooster/eslint-config-js-react](packages/eslint-config-js-react)\n- [@willbooster/eslint-config-next](packages/eslint-config-next)\n- [@willbooster/eslint-config-ts](packages/eslint-config-ts)\n- [@willbooster/eslint-config-ts-react](packages/eslint-config-ts-react)\n- [@willbooster/prettier-config](packages/prettier-config)\n- [@willbooster/renovate-config](packages/renovate-config)\n\n## Following Guides\n\n- [TypeScript StyleGuide](https://basarat.gitbook.io/typescript/styleguide)\n...\nPath: packages/prettier-config/package.json\n{\n  \"name\": \"@willbooster/prettier-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Prettier config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \".prettierrc.json\",\n  \"files\": [\n    \".prettierrc.json\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  ...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01AuXtpD8Wd616DXPsQBhU5J"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs","folderRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}],"workspaceFoldersUnchanged":false}}],"timestamp":"2025-05-02T23:38:05.170Z","response_text":"Let me search for the renovate-config package files specifically:\n","workspace_file_chunks":[]},{"status":"success","request_id":"94cca0b0-bbcd-495f-b520-9a84544a3ec8","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_018Ybhu9orPSUCvPspihtcB4","tool_name":"str-replace-editor","input_json":"{\"command\": \"view\", \"path\": \"renovate.json5\"}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"I see that the renovate-config package mentioned in the README doesn't actually exist in the repository. Let me analyze the current Renovate configuration to understand how to modify it to automatically merge Docker digest updates.\n\nBased on my investigation, I can see that:\n\n1. The main Renovate configuration is in `renovate.json5` at the root of the repository\n2. The `.renovaterc.json` file extends this configuration with `\"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]`\n\nLooking at the current `renovate.json5` file, I can see it already includes `:automergeDigest` in the extends array, which should enable automatic merging of Docker digest updates. However, it seems this isn't working as expected for the specific case of Docker digest updates with commit messages like \"chore(deps): update imbios/bun-node:latest-22-slim docker digest to 8d393e9\".\n\nLet me create a detailed plan to fix this issue.\n\n## Plan\n\n1. Examine the current Renovate configuration in `renovate.json5`\n2. Add a specific packageRule for Docker digest updates to ensure they're automatically merged\n3. Test the changes by updating the configuration\n\n### Detailed Steps:\n\n1. Add a new packageRule to the `packageRules` array in `renovate.json5` that:\n   - Matches Docker digest updates specifically\n   - Sets automerge to true\n   - Configures the PR to be merged automatically\n\nLet me implement this plan:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here are the results from executing the command.\n<return-code>\n1\n</return-code>\n<stdout>\nfind: /Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs/packages/renovate-config: No such file or directory\n\n</stdout>\n<stderr>\n\n</stderr>","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01HsDZ2sveNpwsdh49m4mhrr"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs","folderRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":2,"currentWorkingDirectory":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}}}],"timestamp":"2025-05-02T23:38:10.413Z","response_text":"I see that the renovate-config package mentioned in the README doesn't actually exist in the repository. Let me analyze the current Renovate configuration to understand how to modify it to automatically merge Docker digest updates.\n\nBased on my investigation, I can see that:\n\n1. The main Renovate configuration is in `renovate.json5` at the root of the repository\n2. The `.renovaterc.json` file extends this configuration with `\"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]`\n\nLooking at the current `renovate.json5` file, I can see it already includes `:automergeDigest` in the extends array, which should enable automatic merging of Docker digest updates. However, it seems this isn't working as expected for the specific case of Docker digest updates with commit messages like \"chore(deps): update imbios/bun-node:latest-22-slim docker digest to 8d393e9\".\n\nLet me create a detailed plan to fix this issue.\n\n## Plan\n\n1. Examine the current Renovate configuration in `renovate.json5`\n2. Add a specific packageRule for Docker digest updates to ensure they're automatically merged\n3. Test the changes by updating the configuration\n\n### Detailed Steps:\n\n1. Add a new packageRule to the `packageRules` array in `renovate.json5` that:\n   - Matches Docker digest updates specifically\n   - Sets automerge to true\n   - Configures the PR to be merged automatically\n\nLet me implement this plan:\n","workspace_file_chunks":[]},{"status":"success","request_id":"3b571176-6d91-43bb-85d2-d242804330b2","request_message":"","structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01UG1A47GdHsDZQYpjvipPV9","tool_name":"str-replace-editor","input_json":"{\"command\": \"str_replace\", \"path\": \"renovate.json5\", \"str_replace_entries\": [{\"old_str\": \"  packageRules: [\\n    {\\n      matchDepTypes: ['overrides', 'resolutions'],\\n      enabled: true,\\n    },\\n    {\\n      groupName: 'willbooster-config',\\n      matchPackageNames: ['/^@willbooster/.*config/'],\\n    },\\n    {\\n      groupName: 'python',\\n      matchPackageNames: ['python'],\\n    },\\n    {\\n      ignoreUnstable: false,\\n      matchPackageNames: ['/yarn/'],\\n    },\\n    {\\n      matchPackageNames: ['node'],\\n      allowedVersions: '<=24',\\n    },\\n    {\\n      matchPackageNames: ['babel-plugin-react-compiler'],\\n      enabled: false,\\n    },\\n    {\\n      matchPackageNames: ['eslint', '@types/eslint'],\\n      enabled: false,\\n    },\\n    {\\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\\n      enabled: false,\\n    },\", \"old_str_start_line_number\": 25, \"old_str_end_line_number\": 57, \"new_str\": \"  packageRules: [\\n    {\\n      matchDepTypes: ['overrides', 'resolutions'],\\n      enabled: true,\\n    },\\n    {\\n      groupName: 'willbooster-config',\\n      matchPackageNames: ['/^@willbooster/.*config/'],\\n    },\\n    {\\n      groupName: 'python',\\n      matchPackageNames: ['python'],\\n    },\\n    {\\n      ignoreUnstable: false,\\n      matchPackageNames: ['/yarn/'],\\n    },\\n    {\\n      matchPackageNames: ['node'],\\n      allowedVersions: '<=24',\\n    },\\n    {\\n      matchPackageNames: ['babel-plugin-react-compiler'],\\n      enabled: false,\\n    },\\n    {\\n      matchPackageNames: ['eslint', '@types/eslint'],\\n      enabled: false,\\n    },\\n    {\\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\\n      enabled: false,\\n    },\\n    {\\n      description: 'Automatically merge Docker digest updates',\\n      matchUpdateTypes: ['digest'],\\n      matchDatasources: ['docker'],\\n      automerge: true,\\n      automergeType: 'branch',\\n      automergeStrategy: 'squash',\\n    },\"}]}","mcp_server_name":"","mcp_tool_name":""}},{"id":0,"type":0,"content":"Now I'll modify the `renovate.json5` file to add a specific rule for Docker digest updates:\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Here's the result of running `cat -n` on renovate.json5:\n     1\t{\n     2\t  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n     3\t  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n     4\t  extends: [\n     5\t    'config:recommended',\n     6\t    ':automergeDigest',\n     7\t    ':automergeLinters',\n     8\t    ':automergeMinor',\n     9\t    ':automergePr',\n    10\t    ':automergeTesters',\n    11\t    ':automergeTypes',\n    12\t    ':maintainLockFilesWeekly',\n    13\t    ':pinAllExceptPeerDependencies',\n    14\t    ':prImmediately',\n    15\t    ':rebaseStalePrs',\n    16\t    ':semanticCommits',\n    17\t    'group:linters',\n    18\t    'group:nodeJs',\n    19\t    'group:test',\n    20\t    'group:allNonMajor',\n    21\t    'docker:enableMajor',\n    22\t    'docker:pinDigests',\n    23\t  ],\n    24\t  dependencyDashboardAutoclose: true,\n    25\t  packageRules: [\n    26\t    {\n    27\t      matchDepTypes: ['overrides', 'resolutions'],\n    28\t      enabled: true,\n    29\t    },\n    30\t    {\n    31\t      groupName: 'willbooster-config',\n    32\t      matchPackageNames: ['/^@willbooster/.*config/'],\n    33\t    },\n    34\t    {\n    35\t      groupName: 'python',\n    36\t      matchPackageNames: ['python'],\n    37\t    },\n    38\t    {\n    39\t      ignoreUnstable: false,\n    40\t      matchPackageNames: ['/yarn/'],\n    41\t    },\n    42\t    {\n    43\t      matchPackageNames: ['node'],\n    44\t      allowedVersions: '<=24',\n    45\t    },\n    46\t    {\n    47\t      matchPackageNames: ['babel-plugin-react-compiler'],\n    48\t      enabled: false,\n    49\t    },\n    50\t    {\n    51\t      matchPackageNames: ['eslint', '@types/eslint'],\n    52\t      enabled: false,\n    53\t    },\n    54\t    {\n    55\t      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n    56\t      enabled: false,\n    57\t    },\n    58\t  ],\n    59\t  schedule: ['after 5am on Saturday'],\n    60\t  timezone: 'Asia/Tokyo',\n    61\t}\nTotal lines in file: 61\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_018Ybhu9orPSUCvPspihtcB4"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs","folderRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":2,"currentWorkingDirectory":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}}}],"timestamp":"2025-05-02T23:38:20.573Z","response_text":"Now I'll modify the `renovate.json5` file to add a specific rule for Docker digest updates:\n","workspace_file_chunks":[]},{"status":"success","request_id":"eaa1faab-db64-446d-884a-5c28170de4b6","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"I've successfully updated the `renovate.json5` file to include a specific rule for automatically merging Docker digest updates. Here's what I added:\n\n```json\n{\n  \"description\": \"Automatically merge Docker digest updates\",\n  \"matchUpdateTypes\": [\"digest\"],\n  \"matchDatasources\": [\"docker\"],\n  \"automerge\": true,\n  \"automergeType\": \"branch\",\n  \"automergeStrategy\": \"squash\"\n}\n```\n\nThis new rule will:\n\n1. Match specifically Docker digest updates\n2. Enable automerge for these updates\n3. Use branch automerge (which is more reliable than PR automerge)\n4. Use squash as the merge strategy\n\nThis configuration should ensure that PRs with commit messages like \"chore(deps): update imbios/bun-node:latest-22-slim docker digest to 8d393e9\" are automatically merged.\n\nThe existing configuration already had `:automergeDigest` in the extends array, but adding this specific rule with explicit settings should ensure Docker digest updates are properly handled.\n\nWould you like me to make any additional changes to the configuration?\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"Successfully edited the file renovate.json5.\nResult for str_replace for entry with index [0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    21\t    'docker:enableMajor',\n    22\t    'docker:pinDigests',\n    23\t  ],\n    24\t  dependencyDashboardAutoclose: true,\n    25\t  packageRules: [\n    26\t    {\n    27\t      matchDepTypes: ['overrides', 'resolutions'],\n    28\t      enabled: true,\n    29\t    },\n    30\t    {\n    31\t      groupName: 'willbooster-config',\n    32\t      matchPackageNames: ['/^@willbooster/.*config/'],\n    33\t    },\n    34\t    {\n    35\t      groupName: 'python',\n    36\t      matchPackageNames: ['python'],\n    37\t    },\n    38\t    {\n    39\t      ignoreUnstable: false,\n    40\t      matchPackageNames: ['/yarn/'],\n    41\t    },\n    42\t    {\n    43\t      matchPackageNames: ['node'],\n    44\t      allowedVersions: '<=24',\n    45\t    },\n    46\t    {\n    47\t      matchPackageNames: ['babel-plugin-react-compiler'],\n    48\t      enabled: false,\n    49\t    },\n    50\t    {\n    51\t      matchPackageNames: ['eslint', '@types/eslint'],\n    52\t      enabled: false,\n    53\t    },\n    54\t    {\n    55\t      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n    56\t      enabled: false,\n    57\t    },\n    58\t    {\n    59\t      description: 'Automatically merge Docker digest updates',\n    60\t      matchUpdateTypes: ['digest'],\n    61\t      matchDatasources: ['docker'],\n    62\t      automerge: true,\n    63\t      automergeType: 'branch',\n    64\t      automergeStrategy: 'squash',\n    65\t    },\n    66\t  ],\n    67\t  schedule: ['after 5am on Saturday'],\n    68\t  timezone: 'Asia/Tokyo',\n    69\t}\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01UG1A47GdHsDZQYpjvipPV9"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs","folderRoot":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}],"workspaceFoldersUnchanged":false,"currentTerminal":{"terminalId":2,"currentWorkingDirectory":"/Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs"}}}],"timestamp":"2025-05-02T23:38:32.295Z","response_text":"I've successfully updated the `renovate.json5` file to include a specific rule for automatically merging Docker digest updates. Here's what I added:\n\n```json\n{\n  \"description\": \"Automatically merge Docker digest updates\",\n  \"matchUpdateTypes\": [\"digest\"],\n  \"matchDatasources\": [\"docker\"],\n  \"automerge\": true,\n  \"automergeType\": \"branch\",\n  \"automergeStrategy\": \"squash\"\n}\n```\n\nThis new rule will:\n\n1. Match specifically Docker digest updates\n2. Enable automerge for these updates\n3. Use branch automerge (which is more reliable than PR automerge)\n4. Use squash as the merge strategy\n\nThis configuration should ensure that PRs with commit messages like \"chore(deps): update imbios/bun-node:latest-22-slim docker digest to 8d393e9\" are automatically merged.\n\nThe existing configuration already had `:automergeDigest` in the extends array, but adding this specific rule with explicit settings should ensure Docker digest updates are properly handled.\n\nWould you like me to make any additional changes to the configuration?\n","workspace_file_chunks":[]},{"request_id":"0af23641-7e80-4626-9079-e4ff4d45fff3","uuid":"ae3c0b14-bbcf-453b-9575-345883cf182c","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":1746228953070,"toTimestamp":1746229119874,"seen_state":"seen"}],"feedbackStates":{"temp-fe-bdb6428f-8b0f-471e-a054-2f5cdc95bff2":{"selectedRating":0,"feedbackNote":""},"temp-fe-c26abca4-9c7f-4f1a-8c19-85a3b0305524":{"selectedRating":0,"feedbackNote":""},"temp-fe-c3433962-75fa-4829-bce1-f6445f50a69a":{"selectedRating":0,"feedbackNote":""},"temp-fe-90c99c7f-7db2-4d52-8b2e-4ed9aaebe430":{"selectedRating":0,"feedbackNote":""},"temp-fe-002e8fcf-1fd1-4e49-82b5-d2ee4a07561d":{"selectedRating":0,"feedbackNote":""},"temp-fe-58dba2c5-8735-49df-880a-e8f1b84c44d5":{"selectedRating":0,"feedbackNote":""},"temp-fe-78df2ec4-7e11-4e3b-9c3f-5ff7673bcb36":{"selectedRating":0,"feedbackNote":""},"temp-fe-699b5a5f-07f7-4dab-b576-231def541c51":{"selectedRating":0,"feedbackNote":""},"temp-fe-e47cd7cb-56c9-419c-b22e-39cc3230e19e":{"selectedRating":0,"feedbackNote":""},"temp-fe-25e6cf25-f5cc-49da-a740-64e3cca55710":{"selectedRating":0,"feedbackNote":""},"temp-fe-b0519a0d-2e2b-42a8-ac72-28b25873ad33":{"selectedRating":0,"feedbackNote":""},"temp-fe-dfae25a2-cd3a-440d-a007-55a06a27dacb":{"selectedRating":0,"feedbackNote":""}},"toolUseStates":{"bbbe9829-b914-4b5f-9880-a0ecd2e67e26;toolu_vrtx_01T7EHehfiYJ22TS1VNDjF87":{"requestId":"bbbe9829-b914-4b5f-9880-a0ecd2e67e26","toolUseId":"toolu_vrtx_01T7EHehfiYJ22TS1VNDjF87","phase":5,"result":{"text":"The following code sections were retrieved:\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: packages/biome-config/biome.jsonc\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\",\n  \"files\": {\n    \"ignore\": [\"**/dist/**\", \"**/test-fixtures/**\", \"**/test-results/**\"],\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"attributePosition\": \"auto\",\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 120,\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"arrowParentheses\": \"always\",\n      \"bracketSameLine\": false,\n      \"bracketSpacing\": true,\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"quoteStyle\": \"single\",\n      \"semicolons\": \"always\",\n      \"trailingCommas\": \"es5\",\n    },\n  },\n  \"json\": {\n    \"formatter\": {\n      \"trailingCommas\": \"none\",\n    },\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedImports\": {\n          \"level\": \"error\",\n          \"fix\": \"safe\",\n        },\n      },\n    },\n  },\n  \"organizeImports\": {\n    \"enabled\": true,\n  },\n  \"vcs\": {\n    \"enabled\": true,\n    \"clientKind\": \"git\",\n    \"useIgnoreFile\": true,\n    \"defaultBranch\": \"main\",\n  },\n}\n...\nPath: .yarnrc.yml\ndefaultSemverRangePrefix: ''\n\nenableGlobalCache: true\n\nnmMode: hardlinks-global\n\nnodeLinker: node-modules\n\nplugins:\n  - checksum: 38e9c07e39ad26ceca2aad81e352f9827d3f08608a396e7286ee684b0551208b9043ba43811e5757e32867999023c982b719e6ae981cffdf2e48ba0aa42b77ef\n    path: .yarn/plugins/plugin-auto-install.cjs\n    spec: 'https://github.com/WillBooster/yarn-plugin-auto-install/releases/download/v2.0.2/index.cjs'\n\nyarnPath: .yarn/releases/yarn-4.9.1.cjs\n...\nPath: .releaserc.json\n{\n  \"branches\": [\"main\"],\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", { \"preset\": \"conventionalcommits\" }],\n    [\"@semantic-release/release-notes-generator\", { \"preset\": \"conventionalcommits\" }],\n    \"@semantic-release/npm\",\n    [\n      \"@semantic-release/github\",\n      {\n        \"successComment\": false,\n        \"labels\": [\"r: semantic-release\"],\n        \"releasedLabels\": [\"released :bookmark:\"],\n        \"failComment\": false\n      }\n    ]\n  ]\n}...\nPath: package.json\n...\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify && yarn workspaces foreach --all --parallel --verbose run format\",\n    \"postinstall\": \"husky || true\",\n    \"lint\": \"yarn workspaces foreach --all --parallel --verbose run lint\",\n    \"lint-fix\": \"yarn workspaces foreach --all --parallel --verbose run lint-fix\",\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\",\n    \"prepare\": \"husky || true\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/packages/**\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"release\": \"yarn multi-semantic-release --debug\",\n    \"test\": \"CI=1 FORCE_COLOR=3 yarn workspaces foreach --all --verbose run test\",\n    \"typecheck\": \"yarn workspaces foreach --all --parallel --verbose run typecheck\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@qiwi/multi-semantic-release\": \"7.1.2\",\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"conventional-changelog-conventionalcommits\": \"6.1.0\",\n    \"dotenv-cli\": \"8.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"husky\": \"9.1.7\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"pinst\": \"3.0.0\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  },\n  \"packageManager\": \"yarn@4.9.1\"\n}\n...\nPath: packages/prettier-config/package.json\n{\n  \"name\": \"@willbooster/prettier-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Prettier config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \".prettierrc.json\",\n  \"files\": [\n    \".prettierrc.json\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"devDependencies\": {\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n  \"peerDependencies\": {\n    \"prettier\": \">=2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n...\nPath: README.md\n# WillBooster Configs\n\n[![Test](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n:books: A set of conventional configuration files used in WillBooster Inc..\n\n[![Test](https://github.com/WillBooster/willbooster-configs/workflows/Test/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions?query=workflow%3ATest)\n\n## Packages\n\n- [@willbooster/babel-configs](packages/babel-configs)\n- [@willbooster/eslint-config-blitz-next](packages/eslint-config-blitz-next)\n- [@willbooster/eslint-config-js](packages/eslint-config-js)\n- [@willbooster/eslint-config-js-react](packages/eslint-config-js-react)\n- [@willbooster/eslint-config-next](packages/eslint-config-next)\n- [@willbooster/eslint-config-ts](packages/eslint-config-ts)\n- [@willbooster/eslint-config-ts-react](packages/eslint-config-ts-react)\n- [@willbooster/prettier-config](packages/prettier-config)\n- [@willbooster/renovate-config](packages/renovate-config)\n\n## Following Guides\n\n- [TypeScript StyleGuide](https://basarat.gitbook.io/typescript/styleguide)\n...\nPath: packages/babel-configs/package.json\n{\n  \"name\": \"@willbooster/babel-configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A set of babel configs for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"files\": [\n    \"babel.*.cjs\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/babel__core\": \"7.20.5\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"core-js\": \"3.42.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: .github/workflows/test.yml\nname: Test\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - '**/docs/**'\n  push:\n    branches:\n      - main\n      - wbfy\n    paths-ignore:\n      - '**.md'\n      - '**/docs/**'\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  test:\n    uses: WillBooster/reusable-workflows/.github/workflows/test.yml@main\n    with:\n      github_hosted_runner: true\n    secrets:\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n  './**/migration.sql': (files) => {\n    for (const file of files) {\n      const content = fs.readFileSync(file, 'utf-8');\n      if (content.includes('Warnings:')) {\n        return [\n          `!!! Migration SQL file (${path.relative('', file)}) contains warnings !!! Solve the warnings and commit again.`,\n        ];\n      }\n    }\n    return [];\n  },\n};\n...\nPath: packages/babel-configs/babel.config.cjs\n/** @type {import('@babel/core').TransformOptions} */\nconst config = {\n  presets: [\n    [\n      '@babel/preset-env',\n      {\n        bugfixes: true,\n      },\n    ],\n    '@babel/typescript',\n  ],\n  plugins: ['@babel/proposal-class-properties', '@babel/proposal-numeric-separator'],\n  env: {\n    production: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn'],\n          },\n        ],\n      ],\n    },\n    test: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn', 'debug'],\n          },\n        ],\n      ],\n      presets: [\n        [\n          '@babel/preset-env',\n          {\n            modules: 'auto',\n          },\n        ],\n      ],\n    },\n  },\n};\n\nmodule.exports = config;\n...\nPath: packages/babel-configs/.gitignore\n...\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n...\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n...\nPath: packages/biome-config/.gitignore\n...\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n...\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n...\nPath: packages/babel-configs/README.md\n# babel-configs\n\nA set of babel config files for my repositories.\n\n## How to add dependencies for babel.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n...\nPath: packages/biome-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n  './**/migration.sql': (files) => {\n    for (const file of files) {\n      const content = fs.readFileSync(file, 'utf-8');\n      if (content.includes('Warnings:')) {\n        return [\n          `!!! Migration SQL file (${path.relative('', file)}) contains warnings !!! Solve the warnings and commit again.`,\n        ];\n      }\n    }\n    return [];\n  },\n};\n...\nPath: packages/prettier-config/.gitignore\n...\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n...\nPath: .husky/post-merge\nchanged_files=\"$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)\"\n\nrun_if_changed() {\n  if echo \"$changed_files\" | grep --quiet -E \"$1\"; then\n    eval \"$2\"\n  fi\n}\n\nrun_if_changed \"\\..+-version\" \"awk '{print \\$1}' .tool-versions | xargs -I{} asdf plugin add {}\"\nrun_if_changed \"\\..+-version\" \"asdf plugin update --all\"\nrun_if_changed \"\\..+-version\" \"asdf install\"\nrun_if_changed \"package\\.json\" \"yarn\"\n...\nPath: packages/eslint-config-next/eslint.config.js\n...\n\nconst config = [\n  ...compat.extends('next/core-web-vitals'),\n\n  // We import configs of eslint-config-js/js-react/ts/ts-react manually\n  // because next/core-web-vitals depends on eslint-plugin-import,\n  // and we want to use eslint-plugin-import-x in the above configs.\n\n  // --------------- from eslint-config-js ---------------\n  // Note: don't merge the below two objects!\n  {\n    files: ['{,src/**/,tests/**/,scripts/**/}*.{cjs,js,jsx,mjs}'],\n  },\n  {\n    ignores: [\n      // Directories\n      '**/.venv/**',\n      '**/.yarn/**',\n      '**/3rd-party/**',\n      '**/@types/**',\n      '**/__generated__/**',\n      '**/android/**',\n      '**/bin/**',\n      '**/build/**',\n      '**/coverage/**',\n      '**/dist/**',\n      '**/ios/**',\n      '**/no-format/**',\n      '**/node_modules/**',\n      '**/temp/**',\n      '**/test-fixtures/**',\n      // Files\n      '**/*.d.ts',\n      '**/*.min.*js',\n    ],\n  },\n...\nPath: packages/biome-config/.prettierignore\n...\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addon...","isError":false,"requestId":""}},"ba898e0a-e03b-4916-8110-ba3516de238b;toolu_vrtx_01GAun4yiof2KtRRTMsf6ebJ":{"requestId":"ba898e0a-e03b-4916-8110-ba3516de238b","toolUseId":"toolu_vrtx_01GAun4yiof2KtRRTMsf6ebJ","phase":5,"result":{"text":"The following code sections were retrieved:\nPath: .github/workflows/test.yml\nname: Test\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - '**/docs/**'\n  push:\n    branches:\n      - main\n      - wbfy\n    paths-ignore:\n      - '**.md'\n      - '**/docs/**'\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  test:\n    uses: WillBooster/reusable-workflows/.github/workflows/test.yml@main\n    with:\n      github_hosted_runner: true\n    secrets:\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n...\nPath: .github/workflows/wbfy-merge.yml\nname: Merge wbfy\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 33 17 * * *\njobs:\n  wbfy-merge:\n    uses: WillBooster/reusable-workflows/.github/workflows/wbfy-merge.yml@main\n    with:\n      github_hosted_runner: true\n    secrets:\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n...\nPath: .github/workflows/add-ready-issue-to-project.yml\nname: Add ready issue to GitHub project\non:\n  issues:\n    types:\n      - labeled\njobs:\n  add-ready-issue-to-project:\n    uses: WillBooster/reusable-workflows/.github/workflows/add-issue-to-project.yml@main\n    with:\n      labeled: 'ready :rocket:'\n    secrets:\n      GH_PROJECT_URL: https://github.com/orgs/WillBoosterLab/projects/5\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n...\nPath: .github/workflows/wbfy.yml\nname: Willboosterify\non:\n  workflow_dispatch:\n  schedule:\n    - cron: 5 14 * * *\njobs:\n  wbfy:\n    uses: WillBooster/reusable-workflows/.github/workflows/wbfy.yml@main\n    with:\n      github_hosted_runner: true\n    secrets:\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n...\nPath: .github/workflows/semantic-pr.yml\nname: Lint PR title\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\njobs:\n  semantic-pr:\n    uses: WillBooster/reusable-workflows/.github/workflows/semantic-pr.yml@main\n...\nPath: .github/workflows/release.yml\nname: Release\non:\n  push:\n    branches:\n      - main\nconcurrency:\n  group: ${{ github.workflow }}\n  cancel-in-progress: false\njobs:\n  release:\n    uses: WillBooster/reusable-workflows/.github/workflows/release.yml@main\n    with:\n      github_hosted_runner: true\n    secrets:\n      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_FOR_RELEASE }}\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n...\nPath: .github/workflows/close-comment.yml\nname: Add close comment\non:\n  pull_request:\n    types:\n      - opened\njobs:\n  close-comment:\n    uses: WillBooster/reusable-workflows/.github/workflows/close-comment.yml@main\n...\nPath: .github/workflows/notify-ready.yml\nname: Notify ready\non:\n  issues:\n    types:\n      - labeled\njobs:\n  notify-ready:\n    uses: WillBooster/reusable-workflows/.github/workflows/notify-ready.yml@main\n    secrets:\n      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_FOR_READY }}\n...\nPath: .github/workflows/add-issue-to-project.yml\nname: Add issue to GitHub project\non:\n  issues:\n    types:\n      - labeled\njobs:\n  add-issue-to-project:\n    uses: WillBooster/reusable-workflows/.github/workflows/add-issue-to-project.yml@main\n    secrets:\n      GH_PROJECT_URL: ${{ secrets.GH_PROJECT_URL }}\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n...\nPath: .github/pull_request_template.md\nClose #<IssueNumber>\n\n## Self Check\n\n- [ ] I've confirmed `All checks have passed` on this page. （このページで `All checks have passed` が表示されていることを確認した。）\n  - You may leave this box unchecked due to long workflows.\n  - PR title follows [Angular's commit message format](https://github.com/angular/angular/blob/main/CONTRIBUTING.md#-commit-message-format).\n    - PR title doesn't have `WIP:`.\n  - All tests are passed.\n    - Test command (e.g., `yarn test`) is passed.\n    - Lint command (e.g., `yarn lint`) is passed.\n- [ ] I've reviewed my changes on GitHub PR's diff view. （GitHub上で自分の変更内容を確認した。）\n- [ ] I've written the steps to test your changes. （テスト手順を記載した。）\n- [ ] I've added screenshots. （UIを変更した場合、スクリーンショットを追加した。）\n  - You may leave this box unchecked if you didn't modify the UI.\n\n<!-- Please add screenshots if you modify the UI.\n| Current                  | In coming                |\n| ------------------------ | ------------------------ |\n| <img src=\"\" width=\"400\"> | <img src=\"\" width=\"400\"> |\n-->\n\n<!-- Please add steps to test your changes.\n## Steps to Test\n\n1. Open http://localhost-exercode.willbooster.net:3000/ja-JP/courses/_example/lessons/_example_a_plus_b/problems/_example_a_plus_b after login.\n2. Select the language `C`.\n3. Write the following code:\n   ```c\n   #include <stdio.h>\n\n   int main(void) {\n     int a, b;\n\n     scanf(\"%d %d\", &a, &b);\n     printf(\"%d\", a + b);\n     return 0;\n   }\n   ```\n4. Push `Submit` button.\n5. ...\n-->\n\n<!-- 日本語で記述しても大丈夫です。 -->\n...\nPath: .releaserc.json\n{\n  \"branches\": [\"main\"],\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", { \"preset\": \"conventionalcommits\" }],\n    [\"@semantic-release/release-notes-generator\", { \"preset\": \"conventionalcommits\" }],\n    \"@semantic-release/npm\",\n    [\n      \"@semantic-release/github\",\n      {\n        \"successComment\": false,\n        \"labels\": [\"r: semantic-release\"],\n        \"releasedLabels\": [\"released :bookmark:\"],\n        \"failComment\": false\n      }\n    ]\n  ]\n}...\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: README.md\n# WillBooster Configs\n\n[![Test](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n:books: A set of conventional configuration files used in WillBooster Inc..\n\n[![Test](https://github.com/WillBooster/willbooster-configs/workflows/Test/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions?query=workflow%3ATest)\n\n## Packages\n...\nPath: .husky/post-merge\nchanged_files=\"$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)\"\n\nrun_if_changed() {\n  if echo \"$changed_files\" | grep --quiet -E \"$1\"; then\n    eval \"$2\"\n  fi\n}\n\nrun_if_changed \"\\..+-version\" \"awk '{print \\$1}' .tool-versions | xargs -I{} asdf plugin add {}\"\nrun_if_changed \"\\..+-version\" \"asdf plugin update --all\"\nrun_if_changed \"\\..+-version\" \"asdf install\"\nrun_if_changed \"package\\.json\" \"yarn\"\n...\nPath: package.json\n...\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify && yarn workspaces foreach --all --parallel --verbose run format\",\n    \"postinstall\": \"husky || true\",\n    \"lint\": \"yarn workspaces foreach --all --parallel --verbose run lint\",\n    \"lint-fix\": \"yarn workspaces foreach --all --parallel --verbose run lint-fix\",\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\",\n    \"prepare\": \"husky || true\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/packages/**\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"release\": \"yarn multi-semantic-release --debug\",\n    \"test\": \"CI=1 FORCE_COLOR=3 yarn workspaces foreach --all --verbose run test\",\n    \"typecheck\": \"yarn workspaces foreach --all --parallel --verbose run typecheck\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@qiwi/multi-semantic-release\": \"7.1.2\",\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"conventional-changelog-conventionalcommits\": \"6.1.0\",\n    \"dotenv-cli\": \"8.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"husky\": \"9.1.7\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"pinst\": \"3.0.0\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  },\n  \"packageManager\": \"yarn@4.9.1\"\n}\n...\nPath: packages/eslint-config-js/.lintstagedrc.cjs\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst micromatch = require('micromatch');\n\nmodule.exports = {\n  './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}': [\n    'node ../../node_modules/.bin/eslint --fix',\n    'node ../../node_modules/.bin/prettier --cache --write',\n  ],\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n\n    filteredFiles = filteredFiles.map((file) => path.relative('', file));\n    filteredFiles = micromatch.not(filteredFiles, './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}');\n    filteredFiles = filteredFiles.map((file) => path.resolve(file));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/prettier-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: .lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/') && !file.includes('/packages/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/eslint-config-next/.lintstagedrc.cjs\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst micromatch = require('micromatch');\n\nmodule.exports = {\n  './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}': [\n    'node ../../node_modules/.bin/eslint --fix --rule \"{ react-hooks/exhaustive-deps: 0 }\"',\n    'node ../../node_modules/.bin/prettier --cache --write',\n  ],\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n\n    filteredFiles = filteredFiles.map((file) => path.relative('', file));\n    filteredFiles = micromatch.not(filteredFiles, './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}');\n    filteredFiles = filteredFiles.map((file) => path.resolve(file));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: .yarnrc.yml\ndefaultSemverRangePrefix: ''\n\nenableGlobalCache: true\n\nnmMode: hardlinks-global\n\nnodeLinker: node-modules\n\nplugins:\n  - checksum: 38e9c07e39ad26ceca2aad81e352f9827d3f08608a396e7286ee684b0551208b9043ba43811e5757e32867999023c982b719e6ae981cffdf2e48ba0aa42b77ef\n    path: .yarn/plugins/plugin-auto-install.cjs\n    spec: 'https://github.com/WillBooster/yarn-plugin-auto-install/releases/download/v2.0.2/index.cjs'\n\nyarnPath: .yarn/releases/yarn-4.9.1.cjs\n...\nPath: .gitattributes\n* text=auto\n\n*.lockb binary diff=lockb\n*.vcproj text eol=crlf\n\n*.cjs text eol=lf\n*.cpp text eol=lf\n*.cts text eol=lf\n*.dart text eol=lf\n*.htm text eol=lf\n*.html text eol=lf\n*.js text eol=lf\n*.json text eol=lf\n*.json5 text eol=lf\n*.jsonc text eol=lf\n*.jsx text eol=lf\n*.mjs text eol=lf\n*.mts text eol=lf\n*.pu text eol=lf\n*.puml text eol=lf\n*.rb text eol=lf\n*.ts text eol=lf\n*.tsx text eol=lf\n*.vue text eol=lf\n*.xml text eol=lf\n*.yaml text eol=lf\n*.yml text eol=lf\n*.go text eol=lf\n*.gradle text eol=lf\n*.py text eol=lf\n*.md text eol=lf\n\ndist/** linguist-generated=true\n...\nPath: .husky/pre-commit\nnode node_modules/.bin/lint-staged\n...\nPath: packages/eslint-config-js/.gitignore\n# Project-specific settings (head)\n\n\n# Generated by @willbooster/gen-configs\n\n!.keep\n.env.production\n*/mount/*.hash\n.idea/copilot/chatSessions/\n.devcontainer/\ndist/\ntemp/\n\n# Created by https://www.toptal.com/developers/gitignore/api/windows\n# Edit at https://www.toptal.com/developers/gitignore?templates=windows\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# End of https://www.toptal.com/developers/gitignore/api/windows\n...\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### JetBrains Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n# https://plugins.jetbrains.com/plugin/7973-sonarlint\n.idea/**/sonarlint/\n\n# SonarQube Plugin\n# https://plugins.jetbrains.com/plugin/7238-sonarqube-community-plugin\n.idea/**/sonarIssues.xml\n...\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n...\nPath: packages/shared/.lintstagedrc.cjs\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst micromatch = require('micromatch');\n\nmodule.exports = {\n  './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}': [\n    'node ../../node_modules/.bin/eslint --fix',\n    'node ../../node_modules/.bin/prettier --cache --write',\n  ],\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n\n    filteredFiles = filteredFiles.map((file) => path.relative('', file));\n    filteredFiles = micromatch.not(filteredFiles, './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}');\n    filteredFiles = filteredFiles.map((file) => path.resolve(file));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: .gitignore\n...\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### JetBrains Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n# https://plugins.jetbrains.com/plugin/7973-sonarlint\n.idea/**/sonarlint/\n\n# SonarQube Plugin\n# https://plugins.jetbrains.com/plugin/7238-sonarqube-community-plugin\n.idea/**/sonarIssues.xml\n...\nPath: .husky/pre-push\nyarn workspaces foreach --all --parallel --verbose run typecheck\n...\nPath: packages/shared/.gitignore\n...\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### JetBrains Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n# Sonarlint plugin\n# https://plugins.jetbrains.com/plugin/7973-sonarlint\n.idea/**/sonarlint/\n\n# SonarQube Plugin\n# https://plugins.jetbrains.com/plugin/7238-sonarqube-community-plugin\n.idea/**/sonarIssues.xml\n...\nPath: packages/eslint-config-next/.gitignore\n# Project-specific settings (head)\n\n\n# Generated by @willbooster/gen-configs\n\n!.keep\n.env.production\n*/mount/*.hash\n.idea/copilot/chatSessions/\n.devcontainer/\ndist/\ntemp/\n\n# Created by https://www.toptal.com/developers/gitignore/api/windows\n# Edit at https://www.toptal.com/developers/gitigno...","isError":false,"requestId":""}},"fecf5de4-c186-4f96-9e3a-5455926c2d4c;toolu_vrtx_019aVdfrG8GtnHNWrurDpobZ":{"requestId":"fecf5de4-c186-4f96-9e3a-5455926c2d4c","toolUseId":"toolu_vrtx_019aVdfrG8GtnHNWrurDpobZ","phase":5,"result":{"text":"File saved successfully.","isError":false,"requestId":""}},"4392e591-f220-4c4f-a3d4-273c71cf8271;toolu_vrtx_01UEFrNUGzQSjRm7oSsS37NT":{"requestId":"4392e591-f220-4c4f-a3d4-273c71cf8271","toolUseId":"toolu_vrtx_01UEFrNUGzQSjRm7oSsS37NT","phase":5,"result":{"text":"The following code sections were retrieved:\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: package.json\n{\n  \"name\": \"@willbooster/configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/WillBooster/willbooster-configs.git\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"workspaces\": [\n    \"packages/*\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify && yarn workspaces foreach --all --parallel --verbose run format\",\n    \"postinstall\": \"husky || true\",\n    \"lint\": \"yarn workspaces foreach --all --parallel --verbose run lint\",\n    \"lint-fix\": \"yarn workspaces foreach --all --parallel --verbose run lint-fix\",\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\",\n    \"prepare\": \"husky || true\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/packages/**\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"release\": \"yarn multi-semantic-release --debug\",\n    \"test\": \"CI=1 FORCE_COLOR=3 yarn workspaces foreach --all --verbose run test\",\n    \"typecheck\": \"yarn workspaces foreach --all --parallel --verbose run typecheck\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@qiwi/multi-semantic-release\": \"7.1.2\",\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"conventional-changelog-conventionalcommits\": \"6.1.0\",\n    \"dotenv-cli\": \"8.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"husky\": \"9.1.7\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"pinst\": \"3.0.0\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  },\n  \"packageManager\": \"yarn@4.9.1\"\n}\n...\nPath: README.md\n# WillBooster Configs\n\n[![Test](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n:books: A set of conventional configuration files used in WillBooster Inc..\n\n[![Test](https://github.com/WillBooster/willbooster-configs/workflows/Test/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions?query=workflow%3ATest)\n\n## Packages\n\n- [@willbooster/babel-configs](packages/babel-configs)\n- [@willbooster/eslint-config-blitz-next](packages/eslint-config-blitz-next)\n- [@willbooster/eslint-config-js](packages/eslint-config-js)\n- [@willbooster/eslint-config-js-react](packages/eslint-config-js-react)\n- [@willbooster/eslint-config-next](packages/eslint-config-next)\n- [@willbooster/eslint-config-ts](packages/eslint-config-ts)\n- [@willbooster/eslint-config-ts-react](packages/eslint-config-ts-react)\n- [@willbooster/prettier-config](packages/prettier-config)\n- [@willbooster/renovate-config](packages/renovate-config)\n\n## Following Guides\n\n- [TypeScript StyleGuide](https://basarat.gitbook.io/typescript/styleguide)\n...\nPath: packages/prettier-config/package.json\n{\n  \"name\": \"@willbooster/prettier-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Prettier config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \".prettierrc.json\",\n  \"files\": [\n    \".prettierrc.json\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"devDependencies\": {\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n  \"peerDependencies\": {\n    \"prettier\": \">=2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n...\nPath: packages/biome-config/biome.jsonc\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\",\n  \"files\": {\n    \"ignore\": [\"**/dist/**\", \"**/test-fixtures/**\", \"**/test-results/**\"],\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"attributePosition\": \"auto\",\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 120,\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"arrowParentheses\": \"always\",\n      \"bracketSameLine\": false,\n      \"bracketSpacing\": true,\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"quoteStyle\": \"single\",\n      \"semicolons\": \"always\",\n      \"trailingCommas\": \"es5\",\n    },\n  },\n  \"json\": {\n    \"formatter\": {\n      \"trailingCommas\": \"none\",\n    },\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedImports\": {\n          \"level\": \"error\",\n          \"fix\": \"safe\",\n        },\n      },\n    },\n  },\n...\nPath: packages/babel-configs/package.json\n{\n  \"name\": \"@willbooster/babel-configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A set of babel configs for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"files\": [\n    \"babel.*.cjs\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/babel__core\": \"7.20.5\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"core-js\": \"3.42.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: .yarnrc.yml\ndefaultSemverRangePrefix: ''\n\nenableGlobalCache: true\n\nnmMode: hardlinks-global\n\nnodeLinker: node-modules\n\nplugins:\n  - checksum: 38e9c07e39ad26ceca2aad81e352f9827d3f08608a396e7286ee684b0551208b9043ba43811e5757e32867999023c982b719e6ae981cffdf2e48ba0aa42b77ef\n    path: .yarn/plugins/plugin-auto-install.cjs\n    spec: 'https://github.com/WillBooster/yarn-plugin-auto-install/releases/download/v2.0.2/index.cjs'\n\nyarnPath: .yarn/releases/yarn-4.9.1.cjs\n...\nPath: packages/biome-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/shared/package.json\n{\n  \"name\": \"@willbooster/shared\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"./src\",\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n...\nPath: packages/biome-config/package.json\n{\n  \"name\": \"@willbooster/biome-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Biome config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \"biome.jsonc\",\n  \"files\": [\n    \"biome.jsonc\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n  \"peerDependencies\": {\n    \"@biomejs/biome\": \">=1.7.1\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n...\nPath: packages/biome-config/.gitignore\n...\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n# End of https://www.toptal.com/developers/gitignore/api/vim\n\n# Created by https://www.toptal.com/developers/gitignore/api/yarn\n# Edit at https://www.toptal.com/developers/gitignore?templates=yarn\n\n### yarn ###\n# https://yarnpkg.com/getting-started/qa#which-files-should-be-gitignored\n\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n\n# if you are NOT using Zero-installs, then:\n# comment the following lines\n# !.yarn/cache\n\n# and uncomment the following lines\n.pnp.*\n\n# End of https://www.toptal.com/developers/gitignore/api/yarn\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n...\nPath: packages/biome-config/README.md\n# biome-config\n\nA Biome config file for my repositories.\nYou need to do the following command to install peer dependencies.\n\n```\nyarn add -D @biomejs/biome\n```\n...\nPath: packages/babel-configs/.gitignore\n...\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n# End of https://www.toptal.com/developers/gitignore/api/vim\n\n# Created by https://www.toptal.com/developers/gitignore/api/yarn\n# Edit at https://www.toptal.com/developers/gitignore?templates=yarn\n\n### yarn ###\n# https://yarnpkg.com/getting-started/qa#which-files-should-be-gitignored\n\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n\n# if you are NOT using Zero-installs, then:\n# comment the following lines\n# !.yarn/cache\n\n# and uncomment the following lines\n.pnp.*\n\n# End of https://www.toptal.com/developers/gitignore/api/yarn\n...\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n...\nPath: packages/eslint-config-next/package.json\n{\n  \"name\": \"@willbooster/eslint-config-next\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for Next.js\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix --rule \\\"{ react-hooks/exhaustive-deps: 0 }\\\"\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n...\nPath: packages/babel-configs/README.md\n# babel-configs\n\nA set of babel config files for my repositories.\n\n## How to add dependencies for babel.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n...\nPath: packages/eslint-config-js/package.json\n{\n  \"name\": \"@willbooster/eslint-config-js\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for JavaScript projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\"\n  },\n...\nPath: packages/eslint-config-ts/package.json\n{\n  \"name\": \"@willbooster/eslint-config-ts\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for TypeScript projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix --rule \\\"{ react-hooks/exhaustive-deps: 0 }\\\"\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n...\nPath: packages/biome-config/NOTICE\n@willbooster/biome-config\n\nCopyright (c) 2024 WillBooster Inc. and contributors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n...\nPath: packages/biome-config/.prettierignore\n...\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nb...","isError":false,"requestId":""}},"8fd45689-2488-4cde-a98c-2d06ffff044f;toolu_vrtx_01RjwL8xomQysT2ba436UP7K":{"requestId":"8fd45689-2488-4cde-a98c-2d06ffff044f","toolUseId":"toolu_vrtx_01RjwL8xomQysT2ba436UP7K","phase":5,"result":{"text":"The following code sections were retrieved:\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: .releaserc.json\n{\n  \"branches\": [\"main\"],\n  \"plugins\": [\n    [\"@semantic-release/commit-analyzer\", { \"preset\": \"conventionalcommits\" }],\n    [\"@semantic-release/release-notes-generator\", { \"preset\": \"conventionalcommits\" }],\n    \"@semantic-release/npm\",\n    [\n      \"@semantic-release/github\",\n      {\n        \"successComment\": false,\n        \"labels\": [\"r: semantic-release\"],\n        \"releasedLabels\": [\"released :bookmark:\"],\n        \"failComment\": false\n      }\n    ]\n  ]\n}...\nPath: package.json\n{\n  \"name\": \"@willbooster/configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/WillBooster/willbooster-configs.git\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"workspaces\": [\n    \"packages/*\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify && yarn workspaces foreach --all --parallel --verbose run format\",\n    \"postinstall\": \"husky || true\",\n    \"lint\": \"yarn workspaces foreach --all --parallel --verbose run lint\",\n    \"lint-fix\": \"yarn workspaces foreach --all --parallel --verbose run lint-fix\",\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\",\n    \"prepare\": \"husky || true\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/packages/**\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"release\": \"yarn multi-semantic-release --debug\",\n    \"test\": \"CI=1 FORCE_COLOR=3 yarn workspaces foreach --all --verbose run test\",\n    \"typecheck\": \"yarn workspaces foreach --all --parallel --verbose run typecheck\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@qiwi/multi-semantic-release\": \"7.1.2\",\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"conventional-changelog-conventionalcommits\": \"6.1.0\",\n    \"dotenv-cli\": \"8.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"husky\": \"9.1.7\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"pinst\": \"3.0.0\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  },\n  \"packageManager\": \"yarn@4.9.1\"\n}\n...\nPath: .yarnrc.yml\ndefaultSemverRangePrefix: ''\n\nenableGlobalCache: true\n\nnmMode: hardlinks-global\n\nnodeLinker: node-modules\n\nplugins:\n  - checksum: 38e9c07e39ad26ceca2aad81e352f9827d3f08608a396e7286ee684b0551208b9043ba43811e5757e32867999023c982b719e6ae981cffdf2e48ba0aa42b77ef\n    path: .yarn/plugins/plugin-auto-install.cjs\n    spec: 'https://github.com/WillBooster/yarn-plugin-auto-install/releases/download/v2.0.2/index.cjs'\n\nyarnPath: .yarn/releases/yarn-4.9.1.cjs\n...\nPath: packages/biome-config/biome.jsonc\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\",\n  \"files\": {\n    \"ignore\": [\"**/dist/**\", \"**/test-fixtures/**\", \"**/test-results/**\"],\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"attributePosition\": \"auto\",\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 120,\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"arrowParentheses\": \"always\",\n      \"bracketSameLine\": false,\n      \"bracketSpacing\": true,\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"quoteStyle\": \"single\",\n      \"semicolons\": \"always\",\n      \"trailingCommas\": \"es5\",\n    },\n  },\n  \"json\": {\n    \"formatter\": {\n      \"trailingCommas\": \"none\",\n    },\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedImports\": {\n          \"level\": \"error\",\n          \"fix\": \"safe\",\n        },\n      },\n    },\n  },\n  \"organizeImports\": {\n    \"enabled\": true,\n  },\n  \"vcs\": {\n    \"enabled\": true,\n    \"clientKind\": \"git\",\n    \"useIgnoreFile\": true,\n    \"defaultBranch\": \"main\",\n  },\n}\n...\nPath: .github/workflows/test.yml\nname: Test\non:\n  pull_request:\n    paths-ignore:\n      - '**.md'\n      - '**/docs/**'\n  push:\n    branches:\n      - main\n      - wbfy\n    paths-ignore:\n      - '**.md'\n      - '**/docs/**'\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\njobs:\n  test:\n    uses: WillBooster/reusable-workflows/.github/workflows/test.yml@main\n    with:\n      github_hosted_runner: true\n    secrets:\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n...\nPath: README.md\n# WillBooster Configs\n\n[![Test](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n:books: A set of conventional configuration files used in WillBooster Inc..\n\n[![Test](https://github.com/WillBooster/willbooster-configs/workflows/Test/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions?query=workflow%3ATest)\n\n## Packages\n\n- [@willbooster/babel-configs](packages/babel-configs)\n- [@willbooster/eslint-config-blitz-next](packages/eslint-config-blitz-next)\n- [@willbooster/eslint-config-js](packages/eslint-config-js)\n- [@willbooster/eslint-config-js-react](packages/eslint-config-js-react)\n- [@willbooster/eslint-config-next](packages/eslint-config-next)\n- [@willbooster/eslint-config-ts](packages/eslint-config-ts)\n- [@willbooster/eslint-config-ts-react](packages/eslint-config-ts-react)\n- [@willbooster/prettier-config](packages/prettier-config)\n- [@willbooster/renovate-config](packages/renovate-config)\n\n## Following Guides\n\n- [TypeScript StyleGuide](https://basarat.gitbook.io/typescript/styleguide)\n...\nPath: packages/eslint-config-js-react/package.json\n{\n  \"name\": \"@willbooster/eslint-config-js-react\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for JavaScript projects using React\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix --rule \\\"{ react-hooks/exhaustive-deps: 0 }\\\"\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\"\n  },\n...\nPath: packages/babel-configs/package.json\n{\n  \"name\": \"@willbooster/babel-configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A set of babel configs for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"files\": [\n    \"babel.*.cjs\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/babel__core\": \"7.20.5\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"core-js\": \"3.42.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: .github/workflows/release.yml\nname: Release\non:\n  push:\n    branches:\n      - main\nconcurrency:\n  group: ${{ github.workflow }}\n  cancel-in-progress: false\njobs:\n  release:\n    uses: WillBooster/reusable-workflows/.github/workflows/release.yml@main\n    with:\n      github_hosted_runner: true\n    secrets:\n      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL_FOR_RELEASE }}\n      GH_TOKEN: ${{ secrets.PUBLIC_GH_BOT_PAT }}\n      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}\n...\nPath: packages/prettier-config/package.json\n{\n  \"name\": \"@willbooster/prettier-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Prettier config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \".prettierrc.json\",\n  \"files\": [\n    \".prettierrc.json\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"devDependencies\": {\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n  \"peerDependencies\": {\n    \"prettier\": \">=2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n...\nPath: packages/shared/package.json\n{\n  \"name\": \"@willbooster/shared\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"./src\",\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/eslint-config-ts\": \"^11.2.0\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"eslint-config-flat-gitignore\": \"2.1.0\",\n    \"eslint-config-prettier\": \"10.1.2\",\n    \"eslint-import-resolver-typescript\": \"4.3.4\",\n    \"eslint-plugin-import\": \"2.31.0\",\n    \"eslint-plugin-sort-class-members\": \"1.21.0\",\n    \"eslint-plugin-sort-destructure-keys\": \"2.0.0\",\n    \"eslint-plugin-unicorn\": \"59.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  }\n}\n...\nPath: packages/biome-config/package.json\n{\n  \"name\": \"@willbooster/biome-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Biome config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \"biome.jsonc\",\n  \"files\": [\n    \"biome.jsonc\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: tsconfig.json\n{\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"alwaysStrict\": true,\n    \"declaration\": true,\n    \"esModuleInterop\": true,\n    \"importHelpers\": false,\n    \"jsx\": \"react-jsx\",\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"outDir\": \"dist\",\n    \"resolveJsonModule\": true,\n    \"skipLibCheck\": true,\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"target\": \"esnext\",\n    \"typeRoots\": [\"./node_modules/@types\", \"./@types\"]\n  },\n  \"include\": [\n    \"packages/*/scripts/**/*\",\n    \"packages/*/src/**/*\",\n    \"packages/*/tests/**/*\",\n    \"scripts/**/*\",\n    \"src/**/*\",\n    \"tests/**/*\"\n  ]\n}\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/eslint-config-ts-react/package.json\n{\n  \"name\": \"@willbooster/eslint-config-ts-react\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A ESLint flat config for TypeScript projects using React\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"main\": \"eslint.config.js\",\n  \"files\": [\n    \"eslint.config.js\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"lint\": \"eslint --color\",\n    \"lint-fix\": \"yarn lint --fix --rule \\\"{ react-hooks/exhaustive-deps: 0 }\\\"\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"test\": \"yarn lint\",\n    \"typecheck\": \"tsc --noEmit --Pretty\"\n  },\n...\nPath: packages/biome-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/eslint-config-js-react/.lintstagedrc.cjs\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst micromatch = require('micromatch');\n\nmodule.exports = {\n  './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}': [\n    'node ../../node_modules/.bin/eslint --fix --rule \"{ react-hooks/exhaustive-deps: 0 }\"',\n    'node ../../node_modules/.bin/prettier --cache --write',\n  ],\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n\n    filteredFiles = filteredFiles.map((file) => path.relative('', file));\n    filteredFiles = micromatch.not(filteredFiles, './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}');\n    filteredFiles = filteredFiles.map((file) => path.resolve(file));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/prettier-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/shared/.lintstagedrc.cjs\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst micromatch = require('micromatch');\n\nmodule.exports = {\n  './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}': [\n    'node ../../node_modules/.bin/eslint --fix',\n    'node ../../node_modules/.bin/prettier --cache --write',\n  ],\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n\n    filteredFiles = filteredFiles.map((file) => path.relative('', file));\n    filteredFiles = micromatch.not(filteredFiles, './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}');\n    filteredFiles = filteredFiles.map((file) => path.resolve(file));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: .husky/post-merge\nchanged_files=\"$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)\"\n\nrun_if_changed() {\n  if echo \"$changed_files\" | grep --quiet -E \"$1\"; then\n    eval \"$2\"\n  fi\n}\n\nrun_if_changed \"\\..+-version\" \"awk '{print \\$1}' .tool-versions | xargs -I{} asdf plugin add {}\"\nrun_if_changed \"\\..+-version\" \"asdf plugin update --all\"\nrun_if_changed \"\\..+-version\" \"asdf install\"\nrun_if_changed \"package\\.json\" \"yarn\"\n...\nPath: packages/eslint-config-ts-react/.lintstagedrc.cjs\nconst fs = require('node:fs');\nconst path = require('node:path');\n\nconst micromatch = require('micromatch');\n\nmodule.exports = {\n  './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}': [\n    'node ../../node_modules/.bin/eslint --fix --rule \"{ react-hooks/exhaustive-deps: 0 }\"',\n    'node ../../node_modules/.bin/prettier --cache --write',\n  ],\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n\n    filteredFiles = filteredFiles.map((file) => path.relative('', file));\n    filteredFiles = micromatch.not(filteredFiles, './{scripts,src,tests}/**/*.{cjs,cts,js,jsx,mjs,mts,ts,tsx}');\n    filteredFiles = filteredFiles.map((file) => path.resolve(file));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-packag...","isError":false,"requestId":""}},"90459e11-c201-4bea-83f4-d1757361df94;toolu_vrtx_016vxrLrhz34BFLGSSmy6nZJ":{"requestId":"90459e11-c201-4bea-83f4-d1757361df94","toolUseId":"toolu_vrtx_016vxrLrhz34BFLGSSmy6nZJ","phase":5,"result":{"text":"The following code sections were retrieved:\nPath: packages/biome-config/package.json\n{\n  \"name\": \"@willbooster/biome-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Biome config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \"biome.jsonc\",\n  \"files\": [\n    \"biome.jsonc\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: packages/babel-configs/package.json\n{\n  \"name\": \"@willbooster/babel-configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A set of babel configs for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"files\": [\n    \"babel.*.cjs\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/babel__core\": \"7.20.5\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"core-js\": \"3.42.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: packages/babel-configs/README.md\n# babel-configs\n\nA set of babel config files for my repositories.\n\n## How to add dependencies for babel.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n\n## How to add dependencies for babel.react.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-react \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.react.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-react \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n...\nPath: packages/biome-config/README.md\n# biome-config\n\nA Biome config file for my repositories.\nYou need to do the following command to install peer dependencies.\n\n```\nyarn add -D @biomejs/biome\n```\n...\nPath: packages/biome-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/biome-config/.gitignore\n...\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Local History for Visual Studio Code\n.history/\n\n# Built Visual Studio Code Extensions\n*.vsix\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n# End of https://www.toptal.com/developers/gitignore/api/visualstudiocode\n\n# Created by https://www.toptal.com/developers/gitignore/api/emacs\n# Edit at https://www.toptal.com/developers/gitignore?templates=emacs\n\n### Emacs ###\n# -*- mode: gitignore; -*-\n*~\n\\#*\\#\n/.emacs.desktop\n/.emacs.desktop.lock\n*.elc\nauto-save-list\ntramp\n.\\#*\n\n# Org-mode\n.org-id-locations\n*_archive\n\n# flymake-mode\n*_flymake.*\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n# End of https://www.toptal.com/developers/gitignore/api/vim\n\n# Created by https://www.toptal.com/developers/gitignore/api/yarn\n# Edit at https://www.toptal.com/developers/gitignore?templates=yarn\n\n### yarn ###\n# https://yarnpkg.com/getting-started/qa#which-files-should-be-gitignored\n\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n\n# if you are NOT using Zero-installs, then:\n# comment the following lines\n# !.yarn/cache\n\n# and uncomment the following lines\n.pnp.*\n\n# End of https://www.toptal.com/developers/gitignore/api/yarn\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n...\nPath: packages/babel-configs/babel.config.cjs\n/** @type {import('@babel/core').TransformOptions} */\nconst config = {\n  presets: [\n    [\n      '@babel/preset-env',\n      {\n        bugfixes: true,\n      },\n    ],\n    '@babel/typescript',\n  ],\n  plugins: ['@babel/proposal-class-properties', '@babel/proposal-numeric-separator'],\n  env: {\n    production: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn'],\n          },\n        ],\n      ],\n    },\n    test: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn', 'debug'],\n          },\n        ],\n      ],\n      presets: [\n        [\n          '@babel/preset-env',\n          {\n            modules: 'auto',\n          },\n        ],\n      ],\n    },\n  },\n};\n\nmodule.exports = config;\n...\nPath: packages/babel-configs/.gitignore\n...\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n...\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: README.md\n# WillBooster Configs\n\n[![Test](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions/workflows/test.yml)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\n:books: A set of conventional configuration files used in WillBooster Inc..\n\n[![Test](https://github.com/WillBooster/willbooster-configs/workflows/Test/badge.svg)](https://github.com/WillBooster/willbooster-configs/actions?query=workflow%3ATest)\n\n## Packages\n\n- [@willbooster/babel-configs](packages/babel-configs)\n- [@willbooster/eslint-config-blitz-next](packages/eslint-config-blitz-next)\n- [@willbooster/eslint-config-js](packages/eslint-config-js)\n- [@willbooster/eslint-config-js-react](packages/eslint-config-js-react)\n- [@willbooster/eslint-config-next](packages/eslint-config-next)\n- [@willbooster/eslint-config-ts](packages/eslint-config-ts)\n- [@willbooster/eslint-config-ts-react](packages/eslint-config-ts-react)\n- [@willbooster/prettier-config](packages/prettier-config)\n- [@willbooster/renovate-config](packages/renovate-config)\n\n## Following Guides\n\n- [TypeScript StyleGuide](https://basarat.gitbook.io/typescript/styleguide)\n...\nPath: packages/prettier-config/README.md\n# prettier-config\n\nA prettier config file for my repositories.\nYou need to do the following command to install peer dependencies.\n\n```\nyarn add -D prettier\n```\n...\nPath: packages/prettier-config/package.json\n{\n  \"name\": \"@willbooster/prettier-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Prettier config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \".prettierrc.json\",\n  \"files\": [\n    \".prettierrc.json\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"devDependencies\": {\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n  \"peerDependencies\": {\n    \"prettier\": \">=2\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: package.json\n{\n  \"name\": \"@willbooster/configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/WillBooster/willbooster-configs.git\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"type\": \"module\",\n  \"workspaces\": [\n    \"packages/*\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format && yarn lint-fix\",\n    \"format\": \"sort-package-json && yarn prettify && yarn workspaces foreach --all --parallel --verbose run format\",\n    \"postinstall\": \"husky || true\",\n    \"lint\": \"yarn workspaces foreach --all --parallel --verbose run lint\",\n    \"lint-fix\": \"yarn workspaces foreach --all --parallel --verbose run lint-fix\",\n    \"prepack\": \"pinst --disable\",\n    \"postpack\": \"pinst --enable\",\n    \"prepare\": \"husky || true\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/packages/**\\\" \\\"!**/test-fixtures/**\\\"\",\n    \"release\": \"yarn multi-semantic-release --debug\",\n    \"test\": \"CI=1 FORCE_COLOR=3 yarn workspaces foreach --all --verbose run test\",\n    \"typecheck\": \"yarn workspaces foreach --all --parallel --verbose run typecheck\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@qiwi/multi-semantic-release\": \"7.1.2\",\n    \"@types/eslint\": \"9.6.1\",\n    \"@types/micromatch\": \"4.0.9\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"conventional-changelog-conventionalcommits\": \"6.1.0\",\n    \"dotenv-cli\": \"8.0.0\",\n    \"eslint\": \"9.24.0\",\n    \"husky\": \"9.1.7\",\n    \"lint-staged\": \"15.5.1\",\n    \"micromatch\": \"4.0.8\",\n    \"pinst\": \"3.0.0\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\",\n    \"typescript\": \"5.8.3\"\n  },\n  \"packageManager\": \"yarn@4.9.1\"\n}\n...\nPath: packages/eslint-config-next/README.md\n# eslint-config-next\n\nA ESLint flat config for Next.js.\nYou need to do the following command to install peer dependencies.\n\n```sh\nyarn add -D @willbooster/eslint-config-next \\\n    eslint \\\n    eslint-config-flat-gitignore \\\n    eslint-config-prettier \\\n    eslint-plugin-import \\\n    eslint-plugin-prettier \\\n    eslint-plugin-react \\\n    eslint-plugin-react-hooks \\\n    eslint-plugin-sort-class-members \\\n    eslint-plugin-sort-destructure-keys \\\n    eslint-plugin-unicorn \\\n    eslint-plugin-unused-imports \\\n    typescript \\\n    typescript-eslint \\\n    eslint-import-resolver-typescript \\\n    eslint-config-next\n```\n...\nPath: packages/biome-config/biome.jsonc\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\",\n  \"files\": {\n    \"ignore\": [\"**/dist/**\", \"**/test-fixtures/**\", \"**/test-results/**\"],\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"attributePosition\": \"auto\",\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 120,\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"arrowParentheses\": \"always\",\n      \"bracketSameLine\": false,\n      \"bracketSpacing\": true,\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"quoteStyle\": \"single\",\n      \"semicolons\": \"always\",\n      \"trailingCommas\": \"es5\",\n    },\n  },\n  \"json\": {\n    \"formatter\": {\n      \"trailingCommas\": \"none\",\n    },\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedImports\": {\n          \"level\": \"error\",\n          \"fix\": \"safe\",\n        },\n      },\n    },\n  },\n...\nPath: packages/eslint-config-ts/README.md\n# eslint-config-ts\n\nA ESLint flat config for TypeScript projects.\nYou need to do the following command to install peer dependencies.\n\n```sh\nyarn add -D @willbooster/eslint-config-ts \\\n    eslint \\\n    eslint-config-flat-gitignore \\\n    eslint-config-prettier \\\n    eslint-plugin-import-x \\\n    eslint-plugin-prettier \\\n    eslint-plugin-sort-class-members \\\n    eslint-plugin-sort-destructure-keys \\\n    eslint-plugin-unicorn \\\n    eslint-plugin-unused-imports \\\n    typescript \\\n    typescript-eslint \\\n    eslint-import-resolver-typescript\n```\n...\nPath: packages/eslint-config-ts-react/README.md\n# eslint-config-ts-react\n\nA ESLint flat config for TypeScript projects using React.\nYou need to do the following command to install peer dependencies.\n\n```sh\nyarn add -D @willbooster/eslint-config-ts-react \\\n    eslint \\\n    eslint-config-flat-gitignore \\\n    eslint-config-prettier \\\n    eslint-plugin-import \\\n    eslint-plugin-prettier \\\n    eslint-plugin-react \\\n    eslint-plugin-react-hooks \\\n    eslint-plugin-sort-class-members \\\n    eslint-plugin-sort-destructure-keys \\\n    eslint-plugin-unicorn \\\n    eslint-plugin-unused-imports \\\n    typescript \\\n    typescript-eslint \\\n    eslint-import-resolver-typescript\n```\n...\nPath: packages/prettier-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/eslint-config-js/README.md\n# eslint-config-js\n\nA ESLint flat config for JavaScript projects.\nYou need to do the following command to install peer dependencies.\n\n```sh\nyarn add -D @willbooster/eslint-config-js \\\n    eslint \\\n    eslint-config-flat-gitignore \\\n    eslint-config-prettier \\\n    eslint-plugin-import-x \\\n    eslint-plugin-prettier \\\n    eslint-plugin-sort-class-members \\\n    eslint-plugin-sort-destructure-keys \\\n    eslint-plugin-unicorn \\\n    eslint-plugin-unused-imports \\\n    globals\n```\n...\nPath: packages/eslint-config-js-react/README.md\n# eslint-config-js-react\n\nA ESLint flat config for JavaScript projects using React.\nYou need to do the following command to install p...","isError":false,"requestId":""}},"32398e6a-be04-4df7-ae0e-4ef150ee8717;toolu_vrtx_01AuXtpD8Wd616DXPsQBhU5J":{"requestId":"32398e6a-be04-4df7-ae0e-4ef150ee8717","toolUseId":"toolu_vrtx_01AuXtpD8Wd616DXPsQBhU5J","phase":5,"result":{"text":"The following code sections were retrieved:\nPath: packages/biome-config/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n  './**/migration.sql': (files) => {\n    for (const file of files) {\n      const content = fs.readFileSync(file, 'utf-8');\n      if (content.includes('Warnings:')) {\n        return [\n          `!!! Migration SQL file (${path.relative('', file)}) contains warnings !!! Solve the warnings and commit again.`,\n        ];\n      }\n    }\n    return [];\n  },\n};\n...\nPath: packages/babel-configs/.lintstagedrc.cjs\nconst fs = require('fs');\nconst path = require('path');\n\nmodule.exports = {\n  './**/*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}': (files) => {\n    let filteredFiles = files.filter((file) => !file.includes('/test-fixtures/'));\n    if (filteredFiles.length === 0) return [];\n    const commands = [`node ../../node_modules/.bin/prettier --cache --write ${filteredFiles.join(' ')}`];\n    if (filteredFiles.some((file) => file.endsWith('package.json'))) {\n      commands.push('node ../../node_modules/.bin/sort-package-json');\n    }\n    return commands;\n  },\n...\nPath: packages/biome-config/.gitignore\n# Project-specific settings (head)\n\n\n# Generated by @willbooster/gen-configs\n\n!.keep\n.env.production\n*/mount/*.hash\n.idea/copilot/chatSessions/\n.devcontainer/\ndist/\ntemp/\n\n# Created by https://www.toptal.com/developers/gitignore/api/windows\n# Edit at https://www.toptal.com/developers/gitignore?templates=windows\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# End of https://www.toptal.com/developers/gitignore/api/windows\n...\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Local History for Visual Studio Code\n.history/\n\n# Built Visual Studio Code Extensions\n*.vsix\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n# End of https://www.toptal.com/developers/gitignore/api/visualstudiocode\n\n# Created by https://www.toptal.com/developers/gitignore/api/emacs\n# Edit at https://www.toptal.com/developers/gitignore?templates=emacs\n\n### Emacs ###\n# -*- mode: gitignore; -*-\n*~\n\\#*\\#\n/.emacs.desktop\n/.emacs.desktop.lock\n*.elc\nauto-save-list\ntramp\n.\\#*\n\n# Org-mode\n.org-id-locations\n*_archive\n\n# flymake-mode\n*_flymake.*\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n# End of https://www.toptal.com/developers/gitignore/api/vim\n\n# Created by https://www.toptal.com/developers/gitignore/api/yarn\n# Edit at https://www.toptal.com/developers/gitignore?templates=yarn\n\n### yarn ###\n# https://yarnpkg.com/getting-started/qa#which-files-should-be-gitignored\n\n.yarn/*\n!.yarn/releases\n!.yarn/patches\n!.yarn/plugins\n!.yarn/sdks\n!.yarn/versions\n\n# if you are NOT using Zero-installs, then:\n# comment the following lines\n# !.yarn/cache\n\n# and uncomment the following lines\n.pnp.*\n\n# End of https://www.toptal.com/developers/gitignore/api/yarn\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\n.next\nout\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# vuepress v2.x temp and cache directory\n.temp\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\n.vscode-test\n\n# yarn v2\n.yarn/cache\n.yarn/unplugged\n.yarn/build-state.yml\n.yarn/install-state.gz\n.pnp.*\n...\nPath: packages/babel-configs/.gitignore\n# Project-specific settings (head)\n\n\n# Generated by @willbooster/gen-configs\n\n!.keep\n.env.production\n*/mount/*.hash\n.idea/copilot/chatSessions/\n.devcontainer/\ndist/\ntemp/\n\n# Created by https://www.toptal.com/developers/gitignore/api/windows\n# Edit at https://www.toptal.com/developers/gitignore?templates=windows\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# End of https://www.toptal.com/developers/gitignore/api/windows\n...\n\n### VisualStudioCode ###\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n!.vscode/*.code-snippets\n\n# Local History for Visual Studio Code\n.history/\n\n# Built Visual Studio Code Extensions\n*.vsix\n\n### VisualStudioCode Patch ###\n# Ignore all local history of files\n.history\n.ionide\n\n# End of https://www.toptal.com/developers/gitignore/api/visualstudiocode\n\n# Created by https://www.toptal.com/developers/gitignore/api/emacs\n# Edit at https://www.toptal.com/developers/gitignore?templates=emacs\n\n### Emacs ###\n# -*- mode: gitignore; -*-\n*~\n\\#*\\#\n/.emacs.desktop\n/.emacs.desktop.lock\n*.elc\nauto-save-list\ntramp\n.\\#*\n\n# Org-mode\n.org-id-locations\n*_archive\n\n# flymake-mode\n*_flymake.*\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n...\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Optional stylelint cache\n.stylelintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\n.env\n.env.development.local\n.env.test.local\n.env.production.local\n.env.local\n...\nPath: packages/babel-configs/package.json\n{\n  \"name\": \"@willbooster/babel-configs\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A set of babel configs for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"files\": [\n    \"babel.*.cjs\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@types/babel__core\": \"7.20.5\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"core-js\": \"3.42.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: packages/biome-config/.prettierignore\n...\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n# End of https://www.toptal.com/developers/gitignore/api/emacs\n\n# Created by https://www.toptal.com/developers/gitignore/api/vim\n# Edit at https://www.toptal.com/developers/gitignore?templates=vim\n\n### Vim ###\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n...\n\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n...\nPath: renovate.json5\n{\n  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n  extends: [\n    'config:recommended',\n    ':automergeDigest',\n    ':automergeLinters',\n    ':automergeMinor',\n    ':automergePr',\n    ':automergeTesters',\n    ':automergeTypes',\n    ':maintainLockFilesWeekly',\n    ':pinAllExceptPeerDependencies',\n    ':prImmediately',\n    ':rebaseStalePrs',\n    ':semanticCommits',\n    'group:linters',\n    'group:nodeJs',\n    'group:test',\n    'group:allNonMajor',\n    'docker:enableMajor',\n    'docker:pinDigests',\n  ],\n  dependencyDashboardAutoclose: true,\n  packageRules: [\n    {\n      matchDepTypes: ['overrides', 'resolutions'],\n      enabled: true,\n    },\n    {\n      groupName: 'willbooster-config',\n      matchPackageNames: ['/^@willbooster/.*config/'],\n    },\n    {\n      groupName: 'python',\n      matchPackageNames: ['python'],\n    },\n    {\n      ignoreUnstable: false,\n      matchPackageNames: ['/yarn/'],\n    },\n    {\n      matchPackageNames: ['node'],\n      allowedVersions: '<=24',\n    },\n    {\n      matchPackageNames: ['babel-plugin-react-compiler'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['eslint', '@types/eslint'],\n      enabled: false,\n    },\n    {\n      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n      enabled: false,\n    },\n  ],\n  schedule: ['after 5am on Saturday'],\n  timezone: 'Asia/Tokyo',\n}...\nPath: packages/babel-configs/README.md\n# babel-configs\n\nA set of babel config files for my repositories.\n\n## How to add dependencies for babel.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n\n## How to add dependencies for babel.react.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-react \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console\n```\n\n## How to add dependencies for babel.corejs.react.config.cjs\n\n```sh\nyarn add -D @willbooster/babel-configs \\\n    @babel/core \\\n    @babel/plugin-proposal-class-properties \\\n    @babel/plugin-proposal-numeric-separator \\\n    @babel/preset-env \\\n    @babel/preset-react \\\n    @babel/preset-typescript \\\n    babel-plugin-transform-remove-console \\\n    core-js\n```\n...\nPath: packages/biome-config/package.json\n{\n  \"name\": \"@willbooster/biome-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Biome config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \"biome.jsonc\",\n  \"files\": [\n    \"biome.jsonc\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  \"prettier\": \"@willbooster/prettier-config\",\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@willbooster/prettier-config\": \"^10.0.0\",\n    \"lint-staged\": \"15.5.1\",\n    \"prettier\": \"3.5.3\",\n    \"sort-package-json\": \"3.1.0\"\n  },\n...\nPath: packages/biome-config/README.md\n# biome-config\n\nA Biome config file for my repositories.\nYou need to do the following command to install peer dependencies.\n\n```\nyarn add -D @biomejs/biome\n```\n...\nPath: packages/babel-configs/babel.config.cjs\n/** @type {import('@babel/core').TransformOptions} */\nconst config = {\n  presets: [\n    [\n      '@babel/preset-env',\n      {\n        bugfixes: true,\n      },\n    ],\n    '@babel/typescript',\n  ],\n  plugins: ['@babel/proposal-class-properties', '@babel/proposal-numeric-separator'],\n  env: {\n    production: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn'],\n          },\n        ],\n      ],\n    },\n    test: {\n      plugins: [\n        [\n          'transform-remove-console',\n          {\n            exclude: ['error', 'info', 'warn', 'debug'],\n          },\n        ],\n      ],\n      presets: [\n        [\n          '@babel/preset-env',\n          {\n            modules: 'auto',\n          },\n        ],\n      ],\n    },\n  },\n};\n\nmodule.exports = config;\n...\nPath: .renovaterc.json\n{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\"github>WillBooster/willbooster-configs:renovate.json5\"]\n}\n...\nPath: packages/biome-config/biome.jsonc\n{\n  \"$schema\": \"https://biomejs.dev/schemas/1.8.3/schema.json\",\n  \"files\": {\n    \"ignore\": [\"**/dist/**\", \"**/test-fixtures/**\", \"**/test-results/**\"],\n  },\n  \"formatter\": {\n    \"enabled\": true,\n    \"formatWithErrors\": false,\n    \"attributePosition\": \"auto\",\n    \"indentStyle\": \"space\",\n    \"indentWidth\": 2,\n    \"lineEnding\": \"lf\",\n    \"lineWidth\": 120,\n  },\n  \"javascript\": {\n    \"formatter\": {\n      \"arrowParentheses\": \"always\",\n      \"bracketSameLine\": false,\n      \"bracketSpacing\": true,\n      \"jsxQuoteStyle\": \"double\",\n      \"quoteProperties\": \"asNeeded\",\n      \"quoteStyle\": \"single\",\n      \"semicolons\": \"always\",\n      \"trailingCommas\": \"es5\",\n    },\n  },\n  \"json\": {\n    \"formatter\": {\n      \"trailingCommas\": \"none\",\n    },\n  },\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true,\n      \"correctness\": {\n        \"noUnusedImports\": {\n          \"level\": \"error\",\n          \"fix\": \"safe\",\n        },\n      },\n    },\n  },\n...\nPath: README.md\n...\n\n- [@willbooster/babel-configs](packages/babel-configs)\n- [@willbooster/eslint-config-blitz-next](packages/eslint-config-blitz-next)\n- [@willbooster/eslint-config-js](packages/eslint-config-js)\n- [@willbooster/eslint-config-js-react](packages/eslint-config-js-react)\n- [@willbooster/eslint-config-next](packages/eslint-config-next)\n- [@willbooster/eslint-config-ts](packages/eslint-config-ts)\n- [@willbooster/eslint-config-ts-react](packages/eslint-config-ts-react)\n- [@willbooster/prettier-config](packages/prettier-config)\n- [@willbooster/renovate-config](packages/renovate-config)\n\n## Following Guides\n\n- [TypeScript StyleGuide](https://basarat.gitbook.io/typescript/styleguide)\n...\nPath: packages/prettier-config/package.json\n{\n  \"name\": \"@willbooster/prettier-config\",\n  \"version\": \"0.0.0-semantically-released\",\n  \"description\": \"A Prettier config for WillBooster projects\",\n  \"license\": \"Apache-2.0\",\n  \"author\": \"WillBooster Inc.\",\n  \"main\": \".prettierrc.json\",\n  \"files\": [\n    \".prettierrc.json\"\n  ],\n  \"scripts\": {\n    \"cleanup\": \"yarn format\",\n    \"format\": \"sort-package-json && yarn prettify\",\n    \"prettify\": \"prettier --cache --color --write \\\"**/{.*/,}*.{cjs,css,cts,htm,html,js,json,json5,jsonc,jsx,md,mjs,mts,scss,ts,tsx,vue,yaml,yml}\\\" \\\"!**/test-fixtures/**\\\"\"\n  },\n  ...","isError":false,"requestId":""}},"fcc520b2-5408-4ab1-bab1-a75cdaffb6d3;toolu_vrtx_01HsDZ2sveNpwsdh49m4mhrr":{"requestId":"fcc520b2-5408-4ab1-bab1-a75cdaffb6d3","toolUseId":"toolu_vrtx_01HsDZ2sveNpwsdh49m4mhrr","phase":5,"result":{"text":"Here are the results from executing the command.\n<return-code>\n1\n</return-code>\n<stdout>\nfind: /Users/exkazuu/ghq/github.com/WillBooster/willbooster-configs/packages/renovate-config: No such file or directory\n\n</stdout>\n<stderr>\n\n</stderr>","isError":false,"requestId":""}},"94cca0b0-bbcd-495f-b520-9a84544a3ec8;toolu_vrtx_018Ybhu9orPSUCvPspihtcB4":{"requestId":"94cca0b0-bbcd-495f-b520-9a84544a3ec8","toolUseId":"toolu_vrtx_018Ybhu9orPSUCvPspihtcB4","phase":5,"result":{"text":"Here's the result of running `cat -n` on renovate.json5:\n     1\t{\n     2\t  $schema: 'https://docs.renovatebot.com/renovate-schema.json',\n     3\t  description: 'Default preset for use with WillBooster and WillBoosterLab repos',\n     4\t  extends: [\n     5\t    'config:recommended',\n     6\t    ':automergeDigest',\n     7\t    ':automergeLinters',\n     8\t    ':automergeMinor',\n     9\t    ':automergePr',\n    10\t    ':automergeTesters',\n    11\t    ':automergeTypes',\n    12\t    ':maintainLockFilesWeekly',\n    13\t    ':pinAllExceptPeerDependencies',\n    14\t    ':prImmediately',\n    15\t    ':rebaseStalePrs',\n    16\t    ':semanticCommits',\n    17\t    'group:linters',\n    18\t    'group:nodeJs',\n    19\t    'group:test',\n    20\t    'group:allNonMajor',\n    21\t    'docker:enableMajor',\n    22\t    'docker:pinDigests',\n    23\t  ],\n    24\t  dependencyDashboardAutoclose: true,\n    25\t  packageRules: [\n    26\t    {\n    27\t      matchDepTypes: ['overrides', 'resolutions'],\n    28\t      enabled: true,\n    29\t    },\n    30\t    {\n    31\t      groupName: 'willbooster-config',\n    32\t      matchPackageNames: ['/^@willbooster/.*config/'],\n    33\t    },\n    34\t    {\n    35\t      groupName: 'python',\n    36\t      matchPackageNames: ['python'],\n    37\t    },\n    38\t    {\n    39\t      ignoreUnstable: false,\n    40\t      matchPackageNames: ['/yarn/'],\n    41\t    },\n    42\t    {\n    43\t      matchPackageNames: ['node'],\n    44\t      allowedVersions: '<=24',\n    45\t    },\n    46\t    {\n    47\t      matchPackageNames: ['babel-plugin-react-compiler'],\n    48\t      enabled: false,\n    49\t    },\n    50\t    {\n    51\t      matchPackageNames: ['eslint', '@types/eslint'],\n    52\t      enabled: false,\n    53\t    },\n    54\t    {\n    55\t      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n    56\t      enabled: false,\n    57\t    },\n    58\t  ],\n    59\t  schedule: ['after 5am on Saturday'],\n    60\t  timezone: 'Asia/Tokyo',\n    61\t}\nTotal lines in file: 61\n","isError":false,"requestId":""}},"3b571176-6d91-43bb-85d2-d242804330b2;toolu_vrtx_01UG1A47GdHsDZQYpjvipPV9":{"requestId":"3b571176-6d91-43bb-85d2-d242804330b2","toolUseId":"toolu_vrtx_01UG1A47GdHsDZQYpjvipPV9","phase":5,"result":{"text":"Successfully edited the file renovate.json5.\nResult for str_replace for entry with index [0]:\nReplacement successful.\nEdited section after IDE auto-formatting was applied:\n    21\t    'docker:enableMajor',\n    22\t    'docker:pinDigests',\n    23\t  ],\n    24\t  dependencyDashboardAutoclose: true,\n    25\t  packageRules: [\n    26\t    {\n    27\t      matchDepTypes: ['overrides', 'resolutions'],\n    28\t      enabled: true,\n    29\t    },\n    30\t    {\n    31\t      groupName: 'willbooster-config',\n    32\t      matchPackageNames: ['/^@willbooster/.*config/'],\n    33\t    },\n    34\t    {\n    35\t      groupName: 'python',\n    36\t      matchPackageNames: ['python'],\n    37\t    },\n    38\t    {\n    39\t      ignoreUnstable: false,\n    40\t      matchPackageNames: ['/yarn/'],\n    41\t    },\n    42\t    {\n    43\t      matchPackageNames: ['node'],\n    44\t      allowedVersions: '<=24',\n    45\t    },\n    46\t    {\n    47\t      matchPackageNames: ['babel-plugin-react-compiler'],\n    48\t      enabled: false,\n    49\t    },\n    50\t    {\n    51\t      matchPackageNames: ['eslint', '@types/eslint'],\n    52\t      enabled: false,\n    53\t    },\n    54\t    {\n    55\t      matchPackageNames: ['@blitzjs/auth', '@blitzjs/next', '@blitzjs/rpc', 'blitz'],\n    56\t      enabled: false,\n    57\t    },\n    58\t    {\n    59\t      description: 'Automatically merge Docker digest updates',\n    60\t      matchUpdateTypes: ['digest'],\n    61\t      matchDatasources: ['docker'],\n    62\t      automerge: true,\n    63\t      automergeType: 'branch',\n    64\t      automergeStrategy: 'squash',\n    65\t    },\n    66\t  ],\n    67\t  schedule: ['after 5am on Saturday'],\n    68\t  timezone: 'Asia/Tokyo',\n    69\t}\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n","isError":false,"requestId":""}}},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":true,"extraData":{"isAgentConversation":true,"hasAgentOnboarded":true,"hasDirtyEdits":true},"personaType":0}},"agentExecutionMode":"manual","isAgentEditsCollapsed":true}" />
      </map>
    </option>
  </component>
</project>